<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="pkgmgt">
  <?dbhtml filename="pkgmgt.html"?>


  <title>Pakkehåndtering</title>

  <para>Pakkehåndtering er et ofte etterspurt tillegg
  til LFS boken. En pakkebehandler tillater sporing av
  filer under installasjonen som gjør det enkelt å fjerne og oppgradere pakker.
  Og før du begynner å lure, NEI&mdash;denne delen snakker ikke om noen
  spesiell pakkebehandler, og den anbefaler heller ikke en. Det den gir er
  en oppsummering av de mer populære teknikkene og hvordan de fungerer. Den perfekte
  pakkehåndtering for deg kan være blant disse teknikkene eller kan være en kombinasjon
  av to eller flere av disse teknikkene. Denne delen nevner kort
  problemer som kan oppstå ved oppgradering av pakker.</para>

  <para>Noen grunner til at ingen pakkebehandler er nevnt i LFS
  eller BLFS:</para>

  <itemizedlist>
    <listitem>
      <para>Å håndtere pakkehåndtering tar fokuset bort fra
      målene med disse bøkene&mdash;lære hvordan et Linux system er bygget.</para>
    </listitem>
    <listitem>
      <para>Det er flere løsninger for pakkehåndtering, som hver har
      dens styrker og ulemper. Inkludere en som tilfredsstiller alle målgrupper er
      vanskelig.</para>
    </listitem>
  </itemizedlist>

  <para>Det er skrevet noen tips om emnet pakkehåndtering. Besøk
   <ulink url="&hints-root;">Hints subproject</ulink>
  og se om en av dem passer ditt behov.</para>

  <sect2>
    <title>Oppgraderingsproblemer</title>

    <para>En pakkebehandler gjør det enkelt å oppgradere til nyere versjoner når
    de blir utgitt. Generelt kan instruksjonene i LFS- og BLFS-boken
    brukes til å oppgradere til nyere versjoner. Her er noen punkter du bør
    være oppmerksom på når du oppgraderer pakker, spesielt på et kjørende system.</para>

    <itemizedlist>
      <listitem>
        <para>Hvis en av verktøykjedepakkene
        (<application>Glibc</application>, <application>GCC</application> eller
        <application>Binutils</application>) må oppgraderes til en nyere
        mindre versjon, er det tryggere å gjenoppbygge LFS. Selv om du
        <emphasis>kanskje</emphasis> kunne få til å bygge om alle pakkene
        i deres avhengighetsrekkefølge, anbefaler vi det ikke. For eksempel hvis
        glibc-2.2.x må oppdateres til glibc-2.3.x, er det tryggere å gjenoppbygge.
        For mikroversjonsoppdateringer fungerer vanligvis en enkel ominstallering, men
        er ikke garantert. For eksempel oppgradering fra glibc-2.3.4 til
        glibc-2.3.5 vil vanligvis ikke forårsake noen problemer.</para>
      </listitem>
      <listitem>
        <para>Hvis en pakke som inneholder et delt bibliotek oppdateres, og hvis
        navnet på biblioteket endres, deretter må alle pakkene som dynamisk
        kobler til biblioteket kompileres på nytt for å koble til det nyere biblioteket.
        (Merk at det ikke er noen sammenheng mellom pakkeversjonen og
        navnet på biblioteket.) Tenk for eksempel på en pakke foo-1.2.3 som
        installerer et delt bibliotek med navn
        <filename class='libraryfile'>libfoo.so.1</filename>. Si at du oppgraderer
        pakken til en nyere versjon foo-1.2.4 som installerer et delt bibliotek
        med navn <filename class='libraryfile'>libfoo.so.2</filename>. I dette
        tilfellet, alle pakker som er dynamisk koblet til
        <filename class='libraryfile'>libfoo.so.1</filename> må bli
        kompilert på nytt for å lenke mot
        <filename class='libraryfile'>libfoo.so.2</filename>. Merk at du
        bør ikke fjerne de tidligere bibliotekene før de avhengige pakkene
        er rekompilert</para>
      </listitem>
      <listitem>
        <para>Hvis du oppgraderer et kjørende system, vær på utkikk etter pakker
        som bruken <command>cp</command> i stedet for <command>install</command>
        for å installere filer. Sistnevnte kommando er vanligvis tryggere hvis den kjørbare
        eller biblioteket allerede er lastet inn i minnet.</para>
      </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <title>Pakkehåndteringsteknikker</title>

    <para>Følgende er noen vanlige pakkehåndteringsteknikker. Før du
    tar en avgjørelse om en pakkebehandler, gjør litt undersøkelser på de forskjellige
    teknikker, spesielt ulempene ved den spesielle ordningen.</para>

    <sect3>
      <title>Alt er i Mitt Hode!</title>

      <para>Ja, dette er en pakkehåndteringsteknikk. Noen mennesker trenger ikke
      en pakkebehandler fordi de kjenner pakkene inngående og kjenner
      hvilke filer som er installert av hver pakke. Noen brukere trenger heller ikke noen
      pakkebehandler fordi de planlegger å gjenoppbygge hele systemet
       når en pakke endres.</para>

    </sect3>

    <sect3>
      <title>Installer i Separate Mapper</title>

      <para>Dette er en forenklet pakkehåndtering som ikke trenger noen
      ekstra pakke for å administrere installasjonene. Hver pakke er installert i en
      egen mappe. For eksempel er pakke foo-1.1 installert i
      <filename class='directory'>/usr/pkg/foo-1.1</filename>
      og en symbollenke er laget fra <filename>/usr/pkg/foo</filename> til
      <filename class='directory'>/usr/pkg/foo-1.1</filename>. Ved installasjon
      av en ny versjon foo-1.2, er den installert i
      <filename class='directory'>/usr/pkg/foo-1.2</filename> og den forrige
      symbollenken erstattes av en symbollenke til den nye versjonen.</para>

      <para>Miljøvariablene som de som er nevnt i
      <quote><xref linkend="beyond"/></quote> må utvides til
      å inkludere <filename>/usr/pkg/foo</filename>. For mer enn noen få pakker,
      blir denne ordningen uhåndterlig.</para>

    </sect3>

    <sect3>
      <title>Symbollenke Stil Pakkebehandling</title>

      <para>Dette er en variant av den tidligere pakkehåndteringsteknikken.
      Hver pakke er installert på samme måte som den forrige ordningen. Men i stedet for
      å gjør symbollinken, er hver fil symbollinket inn i
      <filename class='directory'>/usr</filename> hierarkiet. Dette fjerner
      behovet for å utvide miljøvariablene. Selv om symbollenkene kan være
      opprettet av brukeren for å automatisere opprettelsen, er mange pakkebehandlere
      skrevet ved hjelp av denne tilnærmingen. Noen av de populære er Stow,
      Epkg, Graft, og Depot.</para>

      <para>Installasjonen må være forfalsket, slik at pakken tror at den er
      installert i <filename class="directory">/usr</filename> selv om den i virkeligheten er
      installert i <filename class="directory">/usr/pkg</filename> hierarkiet.
      Å installere på denne måten er vanligvis ikke en triviell oppgave. Tenk for eksempel
      at du installerer en pakke libfoo-1.1. Følgende instruksjoner
      installer kanskje ikke pakken riktig:</para>

<screen><userinput>./configure --prefix=/usr/pkg/libfoo/1.1
make
make install</userinput></screen>

      <para>Installasjonen vil fungere, men de avhengige pakkene lenker
      kanskje ikke til libfoo som du forventer. Hvis du kompilerer en pakke som lenker mot
      libfoo, kanskje du legger merke til at den er koblet til
      <filename class='libraryfile'>/usr/pkg/libfoo/1.1/lib/libfoo.so.1</filename>
      i stedet for <filename class='libraryfile'>/usr/lib/libfoo.so.1</filename>
      som du forventer. Den riktige tilnærmingen er å bruke <envar>DESTDIR</envar>
      strategien for å forfalske installasjon av pakken. Denne tilnærmingen fungerer som
      følgende:</para>

<screen><userinput>./configure --prefix=/usr
make
make DESTDIR=/usr/pkg/libfoo/1.1 install</userinput></screen>

      <para>De fleste pakkene støtter denne tilnærmingen, men det er noen
      som ikke gjør det. For ikke-kompatible pakker kan det hende du må
      installer pakken manuelt, eller du kan finne ut at det er enklere å installere
      noen problematiske pakker inn i
      <filename class='directory'>/opt</filename>.</para>

    </sect3>

    <sect3>
      <title>Timestamp Based</title>

      <para>I denne teknikken blir en fil tidsstemplet før installasjonen av
      pakken. Etter installasjonen, en enkel bruk av
      <command>find</command> kommandoen med de riktige alternativene kan generere
      en logg over alle filene som er installert etter at tidsstempelfilen ble opprettet.
      En pakkebehandler skrevet med denne tilnærmingen er install-log.</para>

      <para>Selv om denne ordningen har fordelen av å være enkel, har den to ulemper.
      Hvis filene under installasjonen installeres med et annet tidsstempel enn
      nåværende tidspunkt, vil disse filene ikke spores av pakkebehandleren. Også denne
      ordningen kan bare brukes når en pakke er installert om gangen. Loggene er ikke
      pålitelig hvis to pakker installeres på to forskjellige konsoller.</para>

    </sect3>

    <sect3>
      <title>LD_PRELOAD Basert</title>

      <para>I denne tilnærmingen blir et bibliotek forhåndslastet før installasjon. I løpet av
      installasjonen, sporer dette biblioteket pakkene som blir installert med å
      feste seg til ulike kjørbare filer som f.eks <command>cp</command>,
      <command>install</command>, <command>mv</command> og sporing av systemanrop
      som endrer filsystemet. For at denne tilnærmingen skal fungere, alle kjørbare
      må være dynamisk koblet uten suid- eller sgid-biten. Forhåndsinnlasting av
      biblioteket kan forårsake noen uønskede bivirkninger under installasjonen. Derfor,
      utfør noen tester for å sikre at pakkebehandlingen ikke bryter
      noe og logger alle de riktige filene.</para>

    </sect3>

    <sect3>
      <title>Opprette Pakkearkiver</title>

      <para>I denne ordningen er pakkeinstallasjonen forfalsket til et separat
      tre som beskrevet i Symbollenke Stil Pakkebehandling. Etter
      installasjon, opprettes et pakkearkiv ved hjelp av de installerte filene.
      Dette arkivet brukes deretter til å installere pakken enten på den lokale
      maskinen eller kan til og med brukes til å installere pakken på andre maskiner.</para>

      <para>Denne tilnærmingen brukes av de fleste pakkebehandlere som finnes i
      kommersielle distribusjoner. Eksempler på pakkeforvaltere som følger denne
      tilnærmingen er RPM, pkg-utils, Debian's apt, og Gentoo's Portage system.</para>

    </sect3>

    <sect3>
      <title>Brukerbasert Administrasjon</title>

      <para>Denne ordningen, unik for LFS, ble utviklet av Matthias Benkmann,
      og er tilgjengelig fra <ulink url="&hints-root;">Hints
      Project</ulink>. I denne ordningen er hver pakke installert som en separat bruker
      på standardplasseringene. Filer som tilhører en pakke er lett å identifisere
      ved å sjekke bruker-ID. Funksjonene og manglene ved denne tilnærmingen er
      for komplisert til å beskrive i denne delen. For detaljer, se hintet på <ulink
      url="&hints-root;/downloads/files/more_control_and_pkg_man.txt"/>.</para>

    </sect3>

  </sect2>

</sect1>
