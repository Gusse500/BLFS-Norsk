<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="la-files" xreflabel="Libtool arkiv (.la) filer">
  <?dbhtml filename="la-files.html"?>


  <title>Om Libtool Arkiv (.la) filer</title>

  <!-- section g : 'Others' in longindex.html -->
  <indexterm zone="la-files">
    <primary sortas="g-la-files">Library archive (.la) files</primary>
  </indexterm>

  <sect2 role="package">
    <title>Filer med en .la filtype</title>

    <para>

      I LFS og BLFS bruker mange pakker en internt sendt kopi av libtool for å
      bygge på en rekke Unix plattformer. Dette inkluderer plattformer som f.eks
      AIX, Solaris, IRIX, HP-UX og Cygwin samt Linux. Opprinnelsen til
      dette verktøyet er ganske utdatert. Det var ment å administrere biblioteker på
      systemer med mindre avanserte funksjoner enn et moderne Linux system.

    </para>

    <para>

      På et Linux system er libtool spesifikke filer generelt unødvendige.
      Normalt spesifiseres biblioteker i byggeprosessen under koblingsfasen.
      Siden et linux basert system bruker <ulink
      url="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">
      Executable and Linkable Format (ELF)</ulink> for kjørbare filer og
      dynamiske biblioteker, er informasjon som trengs for å fullføre oppgaven innebygd
      i filene. Både linkeren og programlasteren kan spørre om
      passende filer og koble eller kjøre programmet på riktig måte.

    </para>

    <para>
      Statiske biblioteker brukes sjelden i LFS og BLFS. Og i dag lagrer de fleste
      pakker informasjonen som trengs for å koble til et statisk
      biblioteket til en .pc fil, i stedet for å stole på libtool.
      <command>pkg-config --static --libs</command> kommandoen sender ut
      de tilstrekkelige flaggene til at linkeren kan kobles mot et statisk bibliotek
      uten libtool-magi.
    </para>

    <para>
      Problemet er at libtool vanligvis lager en eller flere tekstfiler for
      pakkebiblioteker kalt libtool arkiver. Disse små filene har en
      ".la" filtype og inneholder informasjon som ligner på den innebygde
      i bibliotekene eller pkg-config-filene. Når du bygger en pakke som
      bruker libtool, ser prosessen automatisk etter disse filene.
      Noen ganger kan en .la fil inneholde navnet eller banen til et statisk bibliotek
      som brukes under bygging, men ikke er installert, da vil byggeprosessen bryte
      fordi .la filen refererer til noe som ikke eksisterer på systemet.
      På samme måte, hvis en pakke er oppdatert og ikke lenger bruker .la-filen,
      da kan byggeprosessen bryte med de gamle .la-filene.
    </para>

    <para>

       Løsningen er å fjerne .la filene. Men det er en hake.
       Noen pakker, som f.eks <xref linkend='imagemagick'/>, bruk en libtool
       funksjon, lt_dlopen, for å laste biblioteker etter behov under kjøring og
       løse deres avhengigheter under kjøring. I dette tilfellet bør .la filene
       bli værende.

    </para>

    <para>

        Skriptet nedenfor fjerner alle unødvendige .la filer og lagrer dem i en
        katalog, /var/local/la-files som standard, ikke i den vanlige bibliotek
        stien. Den søker også i alle pkg-config filer (.pc) etter innebygde
        referanser til .la filer og fikser dem til å være konvensjonelle bibliotek
        referanser som trengs når en applikasjon eller et bibliotek bygges. Den
        kan kjøres etter behov for å rydde opp i katalogene som kan være årsaken
        til problemer.

    </para>

<screen role="root"><userinput>cat &gt; /usr/sbin/remove-la-files.sh &lt;&lt; "EOF"
<literal>#!/bin/bash

# /usr/sbin/remove-la-files.sh
# Written for Beyond Linux From Scratch
# by Bruce Dubbs &lt;bdubbs@&lfs-domainname;&gt;

# Make sure we are running with root privs
if test "${EUID}" -ne 0; then
    echo "Error: $(basename ${0}) must be run as the root user! Exiting..."
    exit 1
fi

# Make sure PKG_CONFIG_PATH is set if discarded by sudo
source /etc/profile

OLD_LA_DIR=/var/local/la-files

mkdir -p $OLD_LA_DIR

# Only search directories in /opt, but not symlinks to directories
OPTDIRS=$(find /opt -mindepth 1 -maxdepth 1 -type d)

# Move any found .la files to a directory out of the way
find /usr/lib $OPTDIRS -name "*.la" ! -path "/usr/lib/ImageMagick*" \
  -exec mv -fv {} $OLD_LA_DIR \;
###############

# Fix any .pc files that may have .la references

STD_PC_PATH='/usr/lib/pkgconfig
             /usr/share/pkgconfig
             /usr/local/lib/pkgconfig
             /usr/local/share/pkgconfig'

# For each directory that can have .pc files
for d in $(echo $PKG_CONFIG_PATH | tr : ' ') $STD_PC_PATH; do

  # For each pc file
  for pc in $d/*.pc ; do
    if [ $pc == "$d/*.pc" ]; then continue; fi

    # Check each word in a line with a .la reference
    for word in $(grep '\.la' $pc); do
      if $(echo $word | grep -q '.la$' ); then
        mkdir -p $d/la-backup
        cp -fv  $pc $d/la-backup

        basename=$(basename $word )
        libref=$(echo $basename|sed -e 's/^lib/-l/' -e 's/\.la$//')

        # Fix the .pc file
        sed -i "s:$word:$libref:" $pc
      fi
    done
  done
done</literal>

EOF

chmod +x /usr/sbin/remove-la-files.sh</userinput></screen>


  </sect2>

</sect1>
