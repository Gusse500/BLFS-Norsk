<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="locale-issues" xreflabel="Lokale Relaterte Problemer">
  <?dbhtml filename="locale-issues.html"?>


  <title>Lokale Relaterte Problemer</title>

  <para>Denne siden inneholder informasjon om lokalitetsrelaterte problemer og
  problemstillinger. I de følgende avsnittene finner du en generisk oversikt over
  ting som kan dukke opp når du konfigurerer systemet ditt for ulike steder.
  Mange (men ikke alle) eksisterende lokalitetsrelaterte problemer kan klassifiseres
  og faller inn under en av overskriftene nedenfor. Alvorlighetsgradene nedenfor bruker
  følgende kriterier:</para>

  <itemizedlist>
    <listitem>
      <para>Kritisk: Programmet utfører ikke hovedfunksjonen sin.
      Løsningen ville være veldig omfattende, det er bedre å søke etter en
      erstatning.</para>
    </listitem>
    <listitem>
      <para>Høy: En del av funksjonaliteten som programmet gir
      er ikke brukbar. Hvis den funksjonaliteten er nødvendig, er det bedre å
      søke etter en erstatning.</para>
    </listitem>
    <listitem>
      <para>Lav: Programmet fungerer i alle typiske brukstilfeller, men mangler
      noe funksjonalitet som normalt leveres av dets ekvivalenter.</para>
    </listitem>
  </itemizedlist>

  <para>Hvis det er en kjent løsning for en bestemt pakke, vil den
    vises på pakkens side.</para>

  <sect2 id="locale-not-valid-option"
         xreflabel="Den Nødvendige Kodingen er Ikke et Gyldig Alternativ">

    <title>Den Nødvendige Kodingen er Ikke et Gyldig Alternativ i Programmet</title>

    <para>Alvorlighet: Kritisk</para>

    <para>Noen programmer krever at brukeren spesifiserer tegnkodingen
    for deres inndata eller utdata og presenterer bare et begrenset utvalg av
    kodinger. Dette er tilfellet for <option>-X</option> alternativet i
<!--    <xref linkend="a2ps"/> og --><xref linkend="enscript"/>,
    <option>-input-charset</option> alternativet i uoppdatert
    <xref linkend="cdrtools"/>, og tegnsettene som tilbys for visning
    i menyen til <xref linkend="Links"/>. Hvis den nødvendige kodingen ikke er
    i listen blir programmet vanligvis helt ubrukelig. Til
    ikke-interaktive programmer, kan det være mulig å omgå dette ved å
    konvertere dokumentet til et støttet inndatategnsett før
    innsending til programmet.</para>

    <para>En løsning på denne typen problemer er å implementere den nødvendige
    støtten for den manglende kodingen som en oppdatering til det originale programmet eller å
    finne en erstatning.</para>

  </sect2>

  <sect2 id="locale-assumed-encoding"
         xreflabel="Program Forutsetter Koding">

    <title>Programmet Forutsetter Lokalitetsbasert Koding av Eksterne
    Dokumenter</title>

    <para>Alvorlighet: Høy for ikke-tekst dokumenter, lav for tekst
    dokumenter</para>

    <para>Noen programmer, <xref linkend="nano"/> eller
    <xref linkend="joe"/> for eksempel, antar at dokumenter alltid er
    i kodingen antydet av gjeldende lokalitet. Mens denne antakelsen
    kan være gyldig for de brukeropprettede dokumentene, er det ikke trygt for
    eksterne. Når denne antagelsen mislykkes, blir ikke-ASCII tegn
    vist feil, og dokumentet kan bli uleselig.</para>

    <para>Hvis det eksterne dokumentet er helt tekstbasert, kan det bli
    konvertert til gjeldende lokalitetskoding ved hjelp av
    <command>iconv</command> programmet.</para>

    <para>For dokumenter som ikke er tekstbaserte er dette ikke mulig.
    Faktisk kan forutsetningen i programmet være fullstendig
    ugyldig for dokumenter der Microsoft Windows operativsystemet
    har satt de facto standarder. Et eksempel på dette problemet er ID3v1 koder
    i MP3-filer. For disse tilfellene er den eneste løsningen å finne et
    erstatningsprogram som ikke har problemet (f.eks. et som
    lar deg spesifisere den antatte dokumentkodingen).</para>

    <para>Blant BLFS pakker gjelder dette problemet
    <xref linkend="nano"/>, <xref linkend="joe"/>, og alle mediespillere
    unntatt <xref linkend="audacious"/>.</para>

    <para>Et annet problem i denne kategorien er når noen ikke kan lese
    dokumentene du har sendt dem fordi deres operativsystem er
    satt opp til å håndtere tegnkodinger annerledes. Dette kan skje
    ofte når den andre personen bruker Microsoft Windows, som kun
    gir en tegnkoding for et gitt land. For eksempel,
    dette forårsaker problemer med UTF-8 kodede TeX dokumenter opprettet i
    Linux. På Windows vil de fleste applikasjoner anta at disse dokumentene
    har blitt opprettet med standard Windows 8-bits koding.
    </para>

    <para>I ekstreme tilfeller kan problemer med Windows kodingskompatibilitet
    kun løses ved å kjøre Windows programmer under
    <ulink url="https://www.winehq.org/">Wine</ulink>.</para>

  </sect2>

  <sect2 id="locale-wrong-filename-encoding"
         xreflabel="Feil Filnavn Koding">

    <title>Programmet Bruker eller Oppretter Filnavn med Feil Koding</title>

    <para>Alvorlighet: Kritisk</para>

    <para>POSIX standarden krever at filnavnkodingen er
     kodingen implisert av gjeldende LC_CTYPE lokalekategori. Denne
    informasjon er godt skjult på siden som spesifiserer atferden
    av <application>Tar</application> og <application>Cpio</application>
    programmer. Noen programmer tar feil som standard (eller har rett og slett ikke
    nok informasjon til å få det riktig). Resultatet er at de
    oppretter filnavn som senere ikke vises riktig av
    <command>ls</command>, eller de nekter å godta filnavn som
    <command>ls</command> vises ordentlig. For <xref linkend="glib2"/>
    biblioteket, kan problemet rettes ved å stille inn
    <envar>G_FILENAME_ENCODING</envar> miljøvariabel til den spesielle
    "@locale" verdien. <application>Glib2</application> baserte programmer som
    ikke respekter den miljøvariabelen er buggy.</para>

    <para><xref linkend="zip"/> og <xref linkend="unzip"/> har dette
    problemet fordi de hardkoder den forventede filnavnkodingen.
    <application>UnZip</application> inneholder en hardkodet konverteringstabell
    mellom kodingene CP850 (DOS) og ISO-8859-1 (UNIX) og bruker denne tabellen
    når du trekker ut arkiver opprettet under DOS eller Microsoft Windows. Men,
    denne antagelsen fungerer bare for de i USA og ikke for alle som bruker en
    UTF-8 lokalitet. Ikke-ASCII tegn vil bli ødelagt i de utpakkede
    filnavn.</para>

    <!--<para>På den andre siden,
    <application>Nautilus CD Burner</application> sjekker navn på
    filer lagt til vinduet for UTF-8 gyldighet. Dette er feil for
    brukere av ikke-UTF-8 lokaliteter. Også,
    <application>Nautilus CD Burner</application> betingelsesløst
    kaller <command>mkisofs</command> med
    <parameter>-input-charset UTF-8</parameter> parameter, som er
    korrekt bare i UTF-8 lokaliteter.</para>-->

    <para>Den generelle regelen for å unngå denne klassen av problemer er å
    unngå å installere ødelagte programmer. Hvis dette er umulig, vil
    <ulink url="https://j3e.de/linux/convmv/">convmv</ulink>
    kommandolinjeverktøy kunne brukes til å fikse filnavn opprettet av disse
    ødelagte programmene, eller med vilje mangle de eksisterende filnavnene
    for å møte de brutte forventningene til slike programmer.</para>

    <para>I andre tilfeller er et lignende problem forårsaket av import
    av filnavn fra et system som bruker en annen lokalitet med et verktøy som
    er ikke lokalbevisst (f.eks., <!--<xref linkend="nfs-utils"/> eller-->
    <xref linkend="openssh"/>). For å unngå mangling av ikke-ASCII
    tegn når du overfører filer til et system med en annen
    lokalitet, kan en av følgende metoder brukes:</para>

    <itemizedlist>
      <listitem>
        <para>Overfør uansett, fiks skaden med
        <command>convmv</command>.</para>
      </listitem>
      <listitem>
        <para>På avsendersiden oppretter du et tar arkiv med
        <parameter>--format=posix</parameter> bryteren overført til
        <command>tar</command> (dette vil være standard i fremtidige
        versjoner av <command>tar</command>).</para>
      </listitem>
      <listitem>
        <para>Send filene som vedlegg. E-postklienter spesifiserer
        koding av vedlagte filnavn.</para>
      </listitem>
      <listitem>
        <para>Skriv filene til en flyttbar disk formatert med et FAT eller
        FAT32 filsystem.</para>
      </listitem>
      <listitem>
        <para>Overfør filene med Samba.</para>
      </listitem>
      <listitem>
        <para>Overfør filene via FTP ved å bruke en RFC2640-bevisst server
        (dette betyr for øyeblikket bare wu-ftpd, som har dårlig sikkerhetshistorikk)
        og klient (f.eks. lftp).</para>
      </listitem>
    </itemizedlist>

    <para>De siste fire metodene fungerer fordi filnavnene blir automatisk
    konvertert fra avsenderens lokalitet til UNICODE og lagret eller sendt i denne
    formen. De blir deretter transparent konvertert fra UNICODE til
    mottakerens lokalitetskoding.</para>

  </sect2>

  <sect2 id="locale-wrong-multibyte-characters"
         xreflabel="Ødelegge Multibyte Tegn">

    <title>Programmet Ødelegger Multibyte Tegn eller Teller Ikke
     Karakterceller Riktig</title>

    <para>Alvorlighet: Høy eller kritisk</para>

    <para>Mange programmer ble skrevet i en eldre tid hvor multibyte
    lokaliteter ikke var vanlige. Slike programmer antar at C "char" data
    type, som er en byte, kan brukes til å lagre enkelttegn.
    Videre antar de at enhver sekvens av tegn er en gyldig
    streng og at hvert tegn opptar en enkelt tegncelle.
    Slike forutsetninger bryter fullstendig i UTF-8 lokaliteter. Den synlige
    manifestasjon er at programmet trunkerer strenger for tidlig
    (dvs. ved 80 byte i stedet for 80 tegn). Terminalbaserte
    programmer plasserer ikke markøren riktig på skjermen, reager ikke
    på "Tilbake" tasten med å slette ett tegn, og lar søppeltegn stå igjen
    rundt når du oppdaterer skjermen, som vanligvis gjør
    skjermen til et komplett rot.</para>

    <para>Å fikse denne typen problemer er en kjedelig oppgave fra en
    programmerers synspunkt, som alle andre tilfeller av ombygging av nye
    konsepter inn i det gamle feilaktige designet. I dette tilfellet må man redesigne
    alle datastrukturer for å imøtekomme det faktum at en komplett
    karakter kan spenne over et variabelt antall "char"-er (eller bytte til wchar_t
    og konvertere etter behov). Også for hver kall til "strlen" og
    lignende funksjoner, finne ut om et antall byte, et antall
    tegn, eller bredden på strengen var egentlig ment. Noen ganger
    er det raskere å skrive et program med samme funksjonalitet fra bunnen av.
    </para>

    <para>Blant BLFS pakker gjelder dette problemet
    <xref linkend="xine-ui"/> og alle skallene.</para>

  </sect2>

  <sect2 id="locale-wrong-manpage-encoding"
         xreflabel="Feil Manualside Koding">

    <title>Pakken Installerer Manualsider i Feil eller
     Ikke-visbar Koding</title>

    <para>Alvorlighet: Lav</para>

    <para>LFS forventer at manuelle sider er på det språkspesifikke (vanligvis
    8-bit) koding, som spesifisert på <ulink
    url="&lfs-root;/chapter08/man-db.html">LFS Man DB side</ulink>. Men,
    noen pakker installerer oversatte manualsider i UTF-8 koding (f.eks.
    Shadow, allerede behandlet), eller manualsider på språk som ikke er i tabellen.
    Ikke alle BLFS pakker har blitt revidert for samsvar med
    krav satt i LFS (de aller fleste er sjekket, og fikser
    plassert i boken for pakker som er kjent for å installere ikke-konform
    manualsider). Hvis du finner en manualside installert av noen av BLFS pakkene, dvs
    åpenbart i feil koding, vennligst fjern eller konverter den etter behov, og
    rapporter dette til BLFS teamet som en feil.</para>

    <para>Du kan enkelt sjekke systemet for eventuelle ikke-konforme manualsider
    ved å kopiere følgende korte shell skript til et tilgjengelig sted,

<screen><literal>#!/bin/sh
# Begin checkman.sh
# Usage: find /usr/share/man -type f | xargs checkman.sh
for a in "$@"
do
    # echo "Checking $a..."
    # Pure-ASCII manual page (possibly except comments) is OK
    grep -v '.\\"' "$a" | iconv -f US-ASCII -t US-ASCII >/dev/null 2>&amp;1 \
        &amp;&amp; continue
    # Non-UTF-8 manual page is OK
    iconv -f UTF-8 -t UTF-8 "$a" >/dev/null 2>&amp;1 || continue
    # Found a UTF-8 manual page, bad.
    echo "UTF-8 manual page: $a" >&amp;2
done
# End checkman.sh
</literal></screen>

    og deretter utstede følgende kommando (endre kommandoen nedenfor hvis
    <command>checkman.sh</command> skriptet ikke er i din <envar>PATH</envar>
    miljøvariabel):</para>

<screen><userinput>find /usr/share/man -type f | xargs checkman.sh</userinput></screen>

    <para>Merk at hvis du har manualsider installert på et annet sted
    enn <filename class='directory'>/usr/share/man</filename> (f.eks.,
    <filename class='directory'>/usr/local/share/man</filename>), må du
    endre kommandoen ovenfor for å inkludere denne ekstra plasseringen.</para>

  </sect2>

</sect1>
