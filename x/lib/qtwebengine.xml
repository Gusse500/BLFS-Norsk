<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY qtwebengine-major "5.15">
<!-- URL if there is a public release
  <!ENTITY qtwebengine-download-http "https://download.qt.io/archive/qt/&qtwebengine-major;/&qtwebengine-version;/submodules/qtwebengine-everywhere-src-&qtwebengine-version;.tar.xz">
     URL for a prepared git version -->
  <!ENTITY qtwebengine-download-http "&sources-anduin-http;/qtwebengine/qtwebengine-&qtwebengine-version;.tar.xz">
  <!ENTITY qtwebengine-download-ftp  " ">
  <!ENTITY qtwebengine-md5sum        "a874390e7987ae5613f4650aab5681e8">
  <!ENTITY qtwebengine-size          "307 MB">
  <!ENTITY qtwebengine-buildsize     "5.1 GB (152 MB installert)">
  <!ENTITY qtwebengine-time          "79 SBU (på en rask maskin, ved hjelp av parallellitet=4)">
]>

<sect1 id="qtwebengine" xreflabel="qtwebengine-&qtwebengine-version;">
  <?dbhtml filename="qtwebengine.html"?>


  <title>QtWebEngine-&qtwebengine-version;</title>

  <indexterm zone="qtwebengine">
    <primary sortas="a-qtwebengine">qtwebengine</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduksjon til QtWebEngine</title>

    <para>
      <application>QtWebEngine</application> integrerer
      <application>chromium</application> sin nettfunksjoner i Qt. Den
      sender med sin egen kopi av ninja som den bruker til byggingen hvis den ikke kan
      finne en systemkopi og forskjellige kopier av biblioteker fra ffmpeg, icu,
      libvpx, og zlib (inkludert libminizip) som har blitt skilt ut av
      <application>chromium</application> utviklere.
    </para>

    <para>
      Denne pakken og nettlesere som bruker den kan være nyttig hvis du trenger å bruke et
      nettsted utviklet for google chrome, eller chromium, nettlesere.
    </para>

    <!-- Note for editors re switching between git versions and releases:
      If a public release of Qt 5.15.3 (or later) appears in a meaningful
      time frame, please keep the notes re the git build, as comments, so
      that updating for later fixes will be easier: in the past, updates
      of 'stable' versions (i.e. 5.12 when 5.14, 5.15 were the newest)
      happened much later than updates to the newest version (now Qt6)
      and it seems likely we might again need to use a git version to fix
      future chromium vulnerabilities. -->

    <warning>
      <para>
        QtWebEngine bruker en utskilt kopi av chromium, og er derfor sårbar
        til mange problemer som finnes der. Qt utviklerne har alltid foretrukket å
        lage utgivelser samtidig som resten av Qt (i stedet for å legge til
        nødrettinger), men med stabile versjoner som blir utgitt etter
        gjeldende utviklingsversjon. Nå som de er opptatt av å flytte til Qt6, har
        5.15.3 og senere Qt-5.15 utgivelser er i utgangspunktet kun tilgjengelige for betalende
        kunder. QtWebEngine er noe av et unntak på grunn av sin LGPL
        lisens, men får git kildene (med utskilt chromium undermodul)
        til en posisjon hvor det lykkes med å bygge videre på et nåværende BLFS system
        kan kreve mye arbeid og derfor kan oppdateringer av boken bli forsinket.
      </para>

      <para>
        Det virker sannsynlig at fremtidige 5.15-serieversjoner også vil bli utgitt
        lenge etter at chromium sårbarhetene er kjent, men fikser for
        QtWebEngine finnes i git, og redaktørene mener at
        kjente sårbarheter i nettlesere bør fikses.
      </para>

      <para> <!-- for git versions -->
        Tarballen lenket nedenfor ble opprettet fra 5.15 git grenen
        og 87 grenen til chromium undermodulen (som er utskilt fra
        chromium). Se GIT-VERSIONS filen i tarballen for detaljer om
        siste forpliktelser.
      </para>
    </warning>

    <!-- note for editors on obtaining webengine from git.
      First (if you do not already have a past version)
      git clone git://code.qt.io/qt/qtwebengine.git
      git submodule init -
       that will report qtwebengine-chromium.git registered for src/3rdparty
       now find the main branch names:
      git fetch origin
      git branch -r
       after a release is prepared (even if the rest is not public), the 5.15
       branch now seems to get updated and might be what you want. But in the
       approach to 5.15.6 the backported CVE and other security fixes were only
       applied to 5.15.6.  So, assuming that a 5.15.7 branch now exists,
      git checkout origin/5.15.7
       Confirm that HEAD is where you expected.
       Now go to src/3rdparty
      git fetch origin
      git branch -r
       The required branch is likely to be 87-branch unless there is a newer one
      mentioned in the 5.15 cgit web page (below).
      git checkout origin/87-branch (or whatever)
       Use git log or git tk to look at its HEAD and check it seems appropriate.
       If this doesn't work, use 'git submodule update'

      To decide when it might be worth creating a new tarball, periodically keep
      an eye on https://code.qt.io/cgit/qt/qtwebengine.git/ (currently, the 5.15.6
      branch, 5.15.7 might get used later). The interesting items are CVE fixes
      for known chromium vulnerabilities, as well as numbered Security bugs -
      again, these relate to chromium.

      When I noticed some updates in late March I was searching for one of the
      CVEs mentioned, and google found a link to a review page for Michael BrÃ¼ning
      at https://codereview.qt.nokia.com/q/owner:michael.bruning%2540qt.io. At that
      time I could see various unmerged items, so I waited. The items for the
      90-based chromium module are not relevant to 5.15-series (possibly they will
      be for qtwebengine-6+). Review queues for other Qt employees might be found
      in a similar way, but remember that everythng EXCEPT qtwebengine and chromium
      is private to Qt until they choose to release it.

      NOTE: the 3rdparty/chromium tree may contain more patches than have been
      merged into the current 5.15.x branch. Any patches after what was in the
      last 'update chromium' merge in qtwebengine occasionally break the build.

      After merging the contents of the qtwebengine and src/3rdparty git extracts,
      in the top level please create a GIT-VERSIONS file summarising the HEAD
      commits of both parts, as a reminder of where we are up to. I've nove added
      a CVE-fixes to keep track of what has been fixed (comits before 5.15.2 did not
      mention the CVEs until they were detailed in a release).

      Now create tarballs - 'git archive' does not work across submodule boundaries,
      so you need to create one archive from the top of qtwebengine/ and another
      from the top of src/3rdparty (chromium, gn, ninja are apparently all part of
      the qtwebengine-chromium module).  Then in a work area untar the qtwebengine
      tarball, go down to src/3rdparty and untar the submodule tarball.
      Decide on what to call the result and create a full xz tarball using tar -cJf.

      NOTE: To use git archive, use something like this:
      git archive - -format tar.gz - -output qtwebengine.tar.gz HEAD
      git archive - -format tar.gz - -output chromium.tar.gz HEAD

      UPDATE: Since we have to host the tarball, and it is over 300MB, it makes
      sense to create a patch for subsequent fixes (for the first version, 314KB
      including the updates to the GIT-VERSIONS file).  For future updates, view
      the current updates patch to see the previous commits. When the new commits
      have been applied, rename the updated version to 'b', but untar the
      unpatched tarball as 'a' and then diff a to b in the usual manner to get
      all updates since the tarball was created.

      For our own releases, probably best to create a fresh tarball.

         end of note for editors -->

    &lfs113_checked;

    <warning>
      <para>
        Som standard vil ninja bruke alle online CPUer +2 (hvis minst 4 finnes),
        selv om de ikke er tilgjengelige for gjeldende oppgave på grunn av at byggeterminalen
        har blitt begrenset med 'oppgavesett'. I BLFS, denne pakken
        tar mer tid å bygge enn noen annen. I ett eksempel,
        konstruksjonen av denne pakken krasjet ved omtrent 90 prosent punktet
        på grunn av et lite minneproblem på et system med 24 kjerner og 32 GB
        av minne.
      </para>

      <para>
        For å omgå dette, se kommandoforklaringene nedenfor.
      </para>
    </warning>

    <note>
      <para>
        Hvis du oppgraderer og har installert en nyere versjon av <xref
        linkend='icu'/> siden du sist installerte <xref linkend='qt5'/>, må du
        installere Qt5 på nytt før oppgraderingen, ellers vil den siste lenken
        av denne pakken mislykkes med en advarsel om at versjonen av icu
        bibliotekene som trengs av libQt5Core.so kan komme i konflikt med versjonen
        som brukes til denne pakken.
      </para>

      <para>
        Uvanlig er det leverte GN byggesystemet (brukt til å lage Ninja filene)
        krever en statisk <filename class="libraryfile">libstdc++.a</filename>
        selv om de installerte bibliotekene bruker den delte versjonen riktig. Hvis
        et statisk bibliotek ikke er til stede, vil byggingen mislykkes ganske raskt.
        Vær oppmerksom på at hvis du prøver å bygge webengine som en del av
        <application>Qt</application> og det statiske biblioteket ikke er tilgjengelig,
        vil den byggingen enten fullføres uten å installere webengine, eller
        mislykkes under installasjonen (begge varianter ble observert i 5.12.0).
      </para>
    </note>

    <bridgehead renderas="sect3">Pakkeinformasjon</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nedlasting (HTTP): <ulink url="&qtwebengine-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting (FTP): <ulink url="&qtwebengine-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting MD5 sum: &qtwebengine-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlastingsstørrelse: &qtwebengine-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert diskplass som kreves: &qtwebengine-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert byggetid: &qtwebengine-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Ytterligere Nedlastinger</bridgehead>
    <itemizedlist spacing="compact">
  <!--<listitem>
        <para>
          Nødvendig oppdatering:
          <!\-\- keep links for releases and git versions as a reminder
               that the tarball names names differ
          <ulink url="&patch-root;/qtwebengine-everywhere-src-&qtwebengine-version;-ICU68-2.patch"/> \-\->

          <ulink url="&patch-root;/qtwebengine-&qtwebengine-version;-5.15.7-1.patch"/>
        </para>
      </listitem>-->
      <listitem>
        <para>
          Nødvendig oppdatering:
          <ulink url="&patch-root;/qtwebengine-&qtwebengine-version;-build_fixes-1.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nødvendig oppdatering:
          <ulink url="&patch-root;/qtwebengine-&qtwebengine-version;-ffmpeg5_fixes-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">qtwebengine Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Påkrevd</bridgehead>
      <!-- the qmake output tends to be misleading. 'khr' is from Mesa -->
    <para role="required">
      <xref linkend="nodejs"/>,
      <xref linkend="nss"/>,
      <xref linkend="pciutils"/>, og
<!--  <xref linkend="python2"/>, and -->
      <xref linkend='qt5'/>
    </para>

    <bridgehead renderas="sect4">Anbefalt</bridgehead>
    <note>
      <para>
        Hvis disse pakkene ikke er installert, vil byggeprosessen kompilere og
        installere sin egen (kanskje eldre) versjon, med bivirkning av
        økt bygg og installert diskplass og byggetid.
      </para>
    </note>

    <para role="recommended">
      enten <xref linkend="alsa-lib"/> eller
      <xref linkend="pulseaudio"/> (eller begge),
      <xref linkend="ffmpeg"/>,
      <!-- awkward wording - libxslt needs libxml2, if libxml2 is built
           before icu then the *shipped* icu will be used -->
      <xref linkend="icu"/> (bygg før <xref linkend="libxml2"/>) ,
      <xref linkend="libwebp"/>,
      <xref linkend="libxslt"/>, og
      <xref linkend="opus"/>
    </para>

    <bridgehead renderas="sect4">Valgfri</bridgehead>
    <para role="optional">
      <xref linkend="libevent"/>,
      <xref linkend="mitkrb"/>,
      <xref linkend="pipewire"/>,
      <xref linkend="poppler"/>,
      <ulink url="https://github.com/open-source-parsers/jsoncpp/releases">jsoncpp</ulink>,
      <ulink url="https://github.com/cisco/libsrtp/releases">libsrtp</ulink>,
      <ulink url="https://google.github.io/snappy/">snappy</ulink>
    </para>

    <para condition="html" role="usernotes">
      Brukernotater: <ulink url="&blfs-wiki;/qtwebengine"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installasjon av qtwebengine</title>

<!-- following merely commented instead of deleted, in case we need to
      drop back when a future version of python3 is released -->
<!--<note>
      <para>
        I motsetning til versjon 5.15.2, trenger det chromium-avledede byggesystemet nå
        <command>python</command> å være tilgjengelig og å være python2. I
        BLFS-10.1 opprettelsen av python symlinken ble fjernet som et trinn
        mot til slutt å bli kvitt python2 (andre gamle pakker som
        trenger python2 fungerer vanligvis ved å påkalle python2). Hvis du fortsatt
        bruker en tidligere versjon av BLFS hvor
        <filename>/usr/bin/python</filename> eksisterer, kan du hoppe over
        kommandoer for å lage symbolkoblingen og fjerne den senere.
      </para>
    </note>

    <para>
      Først, som <systemitem class="username">root</systemitem>
      bruker, lag python symbolkoblingen:
    </para>

<screen role="root"><userinput>ln -svf /usr/bin/python{2,}</userinput></screen>-->


<!--<para>
      Bruk nå en oppdatering for å oppdatere fra 5.15.6 til sikkerheten og andre rettelser
      inneholdt i 5.15.7-kilden:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-5.15.7-1.patch</userinput></screen>-->

    <para>
      Bruk en oppdatering for å fikse flere problemer som kan forhindre at byggingen fullføres,
      og for å tvinge den til å bruke python3:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-build_fixes-1.patch</userinput></screen>

    <para>
      Bruk en oppdatering som løser problemer når du bygger med ffmpeg-5:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-ffmpeg5_fixes-1.patch</userinput></screen>

<!-- start of commands for git versions only -->
    <para>
      Selv om build_fixes oppdateringen har sørget for at git ikke blir påkalt under byggingen,
      byggesystemet har labyrintiske regler for bysantinsk kompleksitet, og
      spesielt prøver å bygge uten to <filename>.git</filename> mapper
      vil føre til at den til slutt faller inn i uventet og ubyggbar kode
      som refererer til en privat deklarasjon som ikke er opprettet. Unngå dette
      ved å opprette de nødvendige mappene:
    </para>

<screen><userinput>mkdir -pv .git src/3rdparty/chromium/.git</userinput></screen>

    <para>
      Fordi denne versjonen av qtwebengine er rettet mot en senere utgivelse enn
      nåværende offentlige utgivelser, endre den for å bygge for qt-&qt5-version; ved bruk av
      sed:
    </para>

<screen><userinput>sed -e '/^MODULE_VERSION/s/5.*/&qt5-version;/' -i .qmake.conf</userinput></screen>
<!-- end of commands for git versions only -->

    <para>
      Sørg nå for at de lokale deklarasjonene er tilgjengelige når du ikke bygger som
      del av det komplette <xref linkend="qt5"/>:
    </para>

<screen><userinput>find -type f -name "*.pr[io]" |
  xargs sed -i -e 's|INCLUDEPATH += |&amp;$$QTWEBENGINE_ROOT/include |'</userinput></screen>

    <para>
      Deretter lar du pulsaudio biblioteket koble på byggetidspunktet
      i stedet for kjøretid. Dette forhindrer også et problem med nyere pulsaudio:
    </para>

<screen><userinput>sed -e '/link_pulseaudio/s/false/true/' \
    -i src/3rdparty/chromium/media/media_options.gni</userinput></screen>

    <para>
      Deretter fikser du byggeverktøyene slik at de kan kjøres med Python-3.11+:
    </para>

<screen><userinput>sed -e 's/\^(?i)/(?i)^/' \
    -i src/3rdparty/chromium/tools/metrics/ukm/ukm_model.py &amp;&amp;
sed -e "s/'rU'/'r'/" \
    -i src/3rdparty/chromium/tools/grit/grit/util.py</userinput></screen>

    <para>
      Til slutt, fiks en endring i byggesystemet som gjør det mulig for utviklerne
      å bruke f.eks. -j20 til make (for raske tester av noen områder), men bryter
      byggingen med LFS sin bruk av miljøvariabelen NINJAJOBS:
    </para>

<!-- editors: See thread at
http://lists.linuxfromscratch.org/pipermail/blfs-dev/2019-December/036996.html
et.seq, particularly 037002.html which shows the commit near the end. -->

<screen><userinput>sed -i 's/NINJAJOBS/NINJA_JOBS/' src/core/gn_run.pro</userinput></screen>

<!-- now that we always install this as 5.15.2, this seems to be redundant
    <para>
      Hvis en eldre versjon av pakkens hovedbibliotek er installert,
      når pakken bygges separat vil den lenke til den foretrukket
      til sin egen ikke-installerte versjon, og mislykkes på grunn av manglende symboler.
      Forhindre at ved, som <systemitem class="username">root</systemitem>
      bruker, flytte symbolkoblingen ut av veien:
    </para>

<screen role="root"><userinput>if [ -e ${QT5DIR}/lib/libQt5WebEngineCore.so ]; then
  mv -v ${QT5DIR}/lib/libQt5WebEngineCore.so{,.old}
fi</userinput></screen>-->

<!--<para>
      Den siste fiksen er nødvendig for å bygge med gcc-12:
    </para>

<screen><userinput>sed -e '/#include/i#include &lt;vector&gt;' \
    -i src/3rdparty/chromium/third_party/skia/src/utils/SkParseColor.cpp</userinput></screen>-->

    <para>
      Installer <application>qtwebengine</application> ved å kjøre følgende
      kommandoer:
    </para>

<screen><userinput>mkdir build &amp;&amp;
cd    build &amp;&amp;
qmake .. -- -system-ffmpeg -proprietary-codecs -webengine-icu &amp;&amp;
make</userinput></screen>

<!--
    <para>
      Hvis du ønsker å bygge HTML dokumentasjonen, kjør:
    </para>

<screen><userinput>make docs</userinput></screen>
-->
    <para>
      Denne pakken kommer ikke med en testpakke.
    </para>

    <para>
      Nå, som <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>make install</userinput></screen>

    <!-- EDITORS NOTE: If you are updating this package, use INSTALL_ROOT=
         instead of DESTDIR= -->
<!--
    <para>
      Hvis du bygde HTML dokumentasjonen, installer den med:
    </para>

<screen role="root"><userinput>make install_docs</userinput></screen>
-->
    <para>
      Fjern referanser til byggemappen fra installert bibliotek
      avhengighetsfiler (prl) ved å kjøre følgende
      kommandoer som <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>find $QT5DIR/ -name \*.prl \
   -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' {} \;</userinput></screen>

<!--<para>
      Til slutt, som <systemitem class="username">root</systemitem>
      bruker, fjern python symbolkoblingen:
    </para>

<screen role="root"><userinput>rm -v /usr/bin/python</userinput></screen>-->
  </sect2>

  <sect2 role="commands">
    <title>Parameterforklaringer</title>

    <para>
      <command>qmake</command>: Dette vil bygge den inkluderte kopien av
      <application>ninja</application> hvis den ikke allerede er installert
      og bruke den til å konfigurere bygget.
    </para>

    <para>
      <command>-- -system-ffmpeg -proprietary-codecs -webengine-icu</command>: Hvis
      noen alternativer sendes til qmake må de komme etter '--' som må følge
      '..' som peker til hovedmappen. Alternativene her får den til å bruke
      system ffmpeg og system icu. Alternativet '-proprietary-codecs' tillater
      ffmpeg for å dekode H264 og H265 kodeker. Hvis bygget er en del av full Qt5, vil
      system icu brukes automatisk (bare) av Qt5Core hvis det er tilgjengelig, men
      med mindre dette alternativet brukes, vil webengine alltid bruke sin sendte kopi av icu,
      som legger til tid og plass til bygget.
    </para>

    <para>
      <option>-webengine-jumbo-build 0</option>: Hvis dette legges til qmake
      kommandoen vil det føre til at 'Jumbo Build Merge Limit' blir rapportert som 'no'
      i stedet for 8. Det slår av jumbo bygget. Noen distroer gjør det for å få
      en mindre bygging på noen arkitekturer som MIPS. På x86_64 kan den spare
      litt plass i bygget, men byggetiden vil øke med en veldig
      stor mengde.
    </para>

    <para>
      <option>-webengine-kerberos</option>: Legg til denne hvis du har installert <xref
      linkend="mitkrb"/> og ønsker å koble til fra en nettleser ved hjelp av QtWebEngine
      til en webserver som krever at du kobler deg til via kerberos.
    </para>

    <!--
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="../../xincludes/SIOCGSTAMP.xml"/>
    -->

    <para>
      <option>NINJAJOBS=4 make</option>: Hvis du oppdaterte system ninja i LFS til
      å gjenkjenne miljøvariabelen NINJAJOBS, vil denne kommandoen kjøre systemets
      ninja med det angitte antall jobber (dvs. 4).
      Det er flere grunner til at du kanskje vil bruke alternativer som dette:
    </para>

      <itemizedlist>
        <listitem>
          <para>
            Å bygge på et undersett av CPUer gjør det mulig å måle byggetiden
            for et mindre antall prosessorer, og/eller kjører andre
            CPU intensive oppgaver samtidig. For en redaktør på en maskin
            med mange CPUer, å prøve å måle byggetiden for en 4-CPU
            maskin, <option>NINJAJOBS=4 make</option> vil gi en rimelig
            tilnærming (det er en kort periode hvor N+2 python og node
            jobber kjøres).
          </para>
        </listitem>
        <listitem>
          <para>
            På en maskin med bare 4 CPUer tilgjengelig, standard planlegging
            med N+2 jobber for qtwebengine er tregere med mellom 3% og 7%, sannsynligvis
            på grunn av størrelsen på C++ filene og deres mange inkluderinger og
            maler. Derfor, hvis du er i tvil, sett NINJAJOBS til antall CPUer.
          </para>
        </listitem>
        <listitem>
          <para>
            Å redusere antall kjerner som brukes på langvarig CPU
            intensive pakker kan hjelpe på varmeproblemer.
          </para>
        </listitem>
        <listitem>
          <para>
            Redusering av antall kjerner vil forhindre potensielt tomt minne
            problemer på systemer som ikke har nok minne (eller vekselminne)
            når alle kjerner er aktive. En foreslått tilnærming er å begrense
            antall kjerner til omtrent en kjerne for hver 1,5 GB av
            kombinert RAM og vekselminne.
          </para>
        </listitem>
      </itemizedlist>

  </sect2>

  <sect2 role="configuration">
    <title>Konfigurere QtWebEngine</title>

    <sect3 id="qtwebengine-config">
      <title>Konfigurasjonsinformasjon</title>

      <para>
        Hvis du oppgraderer fra en eldre mindre versjon av denne
        applikasjon, for at enkelte nettsider skal lastes, må du kanskje
        fjerne <emphasis>nettleser</emphasis> mellomlagring, f.eks. til
        <application>falkon</application> vil de bli funnet i
        <filename class="directory">~/.cache/falkon/</filename>.
        Du må gjøre dette hvis nettleseren begynner å gjengi
        siden og endres deretter til en tom fane med en melding
        at noe gikk galt, og en knapp for å prøve på nytt. Til og med
        etter at du har fjernet de gamle mellomlagrene, kan det hende du må prøve
        noen ganger for hver berørt fane.
      </para>

      <para>
        Hvis en nettleser som bruker denne pakken ikke klarer å kjøre og når den kjøres
        fra en term rapporterer det 'Trace/breakpoint trap', dvs
        sannsynligvis et problem med kjernekonfigurasjon - det er ikke nødvendig
        å gjenoppbygge QtWebEngine, se neste avsnitt, kompiler på nytt
        kjernen og start på nytt til den nye kjernen.
      </para>

    </sect3>

  </sect2>

  <sect2 role="kernel" id="qtwebengine-kernel">
    <title>Kjernekonfigurasjon</title>

    <para>
      Denne pakken krever ingen av de valgfrie kjernenavneromselementene,
      men hvis brukernavneområdet er aktivert <phrase revision="systemd">(som skjer
      i noen enhetsfiler, for økt sikkerhet)</phrase> PID navneområde må også være
      aktivert. Aktiver i så fall følgende alternativer i kjernekonfigurasjonen
      og kompiler kjernen på nytt om nødvendig:
    </para>

<!-- Spaces are significant in <screen> sections -->
<screen><literal>General setup ---&gt;
  -*- Namespaces support ---&gt;
    [ ]     User namespace                    [CONFIG_USER_NS]
    [*]     PID namespace                     [CONFIG_PID_NS]</literal></screen>

    <indexterm zone="qtwebengine qtwebengine-kernel">
      <primary sortas="d-qtwebengine">qtwebengine</primary>
    </indexterm>
  </sect2>

  <sect2 role="content">
    <title>Innhold</title>

    <segmentedlist>
      <segtitle>Installerte Programmer</segtitle>
      <segtitle>Installerte Biblioteker</segtitle>
      <segtitle>Installerte Mapper</segtitle>

      <seglistitem>
        <seg>
          qtwebengine_convert_dict og
          QtWebEngineProcess (i $QT5DIR/libexec)
        </seg>
        <seg>
          libQt5Pdf.so,
          libQt5PdfWidgets.so,
          libQt5WebEngineCore.so,
          libQt5WebEngine.so, og
          libQt5WebEngineWidgets.so
        </seg>
        <seg>
          $QT5DIR/include/QtPdf,
          $QT5DIR/include/QtPdfWidgets,
          $QT5DIR/include/QtWebEngine,
          $QT5DIR/include/QtWebEngineCore,
          $QT5DIR/include/QtWebEngineWidgets,
          $QT5DIR/qml/QtWebEngine, og
          $QT5DIR/translations/qtwebengine_locales
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Korte Beskrivelser</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="qtwebengine_convert_dict">
        <term><command>qtwebengine_convert_dict</command></term>
        <listitem>
          <para>
            konverterer hunspell ordbøker (<literal>.dic</literal>) til chromium
            format (<literal>.bdic</literal>)
          </para>
          <indexterm zone="qtwebengine qtwebengine_convert_dict">
            <primary sortas="b-qtwebengine_convert_dict">qtwebengine_convert_dict</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="QtWebEngineProcess">
        <term><command>QtWebEngineProcess</command></term>
        <listitem>
          <para>
            er et libexec program som kjører en zygote prosess (en som lytter
            for spawn forespørsler fra en masterprosess, og vil gå inn
            i respons)
          </para>
          <indexterm zone="qtwebengine QtWebEngineProcess">
            <primary sortas="b-QtWebEngineProcess">QtWebEngineProcess</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngine-lib">
        <term><filename class="libraryfile">libQtWebEngine.so</filename></term>
        <listitem>
          <para>
            gir QML typer for gjengivelse av nettinnhold i en QML applikasjon
          </para>
          <indexterm zone="qtwebengine libQtWebEngine-lib">
            <primary sortas="c-libQtWebEngine">libQtWebEngine.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngineCore">
        <term><filename class="libraryfile">libQtWebEngineCore.so</filename></term>
        <listitem>
          <para>
            gir offentlig API som deles av både QtWebEngine og QtWebEngineWidgets
          </para>
          <indexterm zone="qtwebengine libQtWebEngineCore">
            <primary sortas="c-libQtWebEngineCore">libQtWebEngineCore.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngineWidgets">
        <term><filename class="libraryfile">libQtWebEngineWidgets.so</filename></term>
        <listitem>
          <para>
            gir en nettlesermotor samt C++ klasser for å gjengi og
            samhandle med nettinnhold
          </para>
          <indexterm zone="qtwebengine libQtWebEngineWidgets">
            <primary sortas="c-libQtWebEngineWidgets">libQtWebEngineWidgets.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>
  </sect2>

</sect1>
