<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY certhost              "https://hg.mozilla.org/">
  <!ENTITY certpath              "/lib/ckfw/builtins/certdata.txt">
  <!ENTITY make-ca-buildsize     "6.9 MB (med alle kjøretidsdeps)">
  <!ENTITY make-ca-time          "0.1 SBU (med alle kjøretidsdeps)">

  <!ENTITY make-ca-download      "https://github.com/lfs-book/make-ca/releases/download/v&make-ca-version;/make-ca-&make-ca-version;.tar.xz">
  <!ENTITY make-ca-size          "36 KB">
  <!ENTITY make-ca-md5sum        "67e0b911e73a859fc326171c5153d455">
]>

<sect1 id="make-ca" xreflabel="make-ca-&make-ca-version;">
  <?dbhtml filename="make-ca.html"?>


  <title>make-ca-&make-ca-version;</title>
  <indexterm zone="make-ca">
    <primary sortas="a-make-ca">make-ca</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduksjon til make-ca</title>

    <para>
      Offentlig nøkkelinfrastruktur (PKI) er en metode for å validere ektheten
      av en ellers ukjent enhet på tvers av uklarerte nettverk. PKI fungerer med å
      etablere en tillitskjede, i stedet for å stole på hver enkelt vert
      eller enhet eksplisitt. For å få et sertifikat presentert av en fjern
      enhet som skal stoles på, må sertifikatet presentere en komplett kjede av
      sertifikater som kan valideres ved hjelp av rotsertifikatet til en
      Sertifiseringsinstans (CA) som er klarert av den lokale maskinen.
    </para>

    <para>
      Å etablere tillit med en CA innebærer å validere ting som selskap
      adresse, eierskap, kontaktinformasjon osv., og sikre at CA
      har fulgt beste praksis, som å gjennomgå periodiske sikkerhetsrevisjoner
      av uavhengige etterforskere og opprettholde en alltid tilgjengelig
      sertifikatopphevelsesliste. Dette er godt utenfor omfanget av BLFS (som
      det er for de fleste Linux distribusjoner). Sertifikatlageret som oppgis her
      er hentet fra Mozilla Foundation, som har etablert svært strenge
      retningslinjer for inkludering beskrevet <ulink
        url="https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/">her</ulink>.
    </para>

    &lfs113_checked;

    <bridgehead renderas="sect3">Pakkeinformasjon</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nedlasting (HTTP): <ulink url="&make-ca-download;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlastingsstørrelse: &make-ca-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting MD5 Sum: &make-ca-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert diskplass som kreves: &make-ca-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert byggetid: &make-ca-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">make-ca Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Påkrevd</bridgehead>
    <para role="required">
      <xref linkend="p11-kit"/> (kreves ved kjøretid for å
      generere sertifikatlagre fra tillitsankere)
    </para>
    <!-- /usr/bin/trust is needed to extract the certs to /etc/ssl/certs -->

   <bridgehead renderas="sect4">Valgfri (kjøretid)</bridgehead>
    <para role="optional">
      <xref role="runtime" linkend="nss"/> (å generere en delt NSSDB)
    </para>

    <para condition="html" role="usernotes">Brukernotater:
    <ulink url='&blfs-wiki;/make-ca'/></para>
  </sect2>

  <sect2 role="installation">
    <title>Installasjon av make-ca</title>

    <para>
      <application>make-ca</application> skriptet vil laste ned og behandle
      sertifikatene som er inkludert i <filename>certdata.txt</filename> filen
      til bruk som tillitsankere for <xref linkend="p11-kit"/> tillitsmodulen.
      I tillegg vil den generere systemsertifikatlagre som brukes av BLFS
      applikasjoner (hvis de anbefalte og valgfrie applikasjonene finnes
      på systemet). Eventuelle lokale sertifikater lagret i
      <filename>/etc/ssl/local</filename> vil bli importert til både
      tillitsankere og de genererte sertifikatlagrene (overstyrer Mozillas
      tillit). I tillegg vil eventuelle modifiserte tillitsverdier bli kopiert fra
      tillitsankere til <filename>/etc/ssl/local</filename> før evt
      oppdateringer, som bevarer tilpassede tillitsverdier som er forskjellige fra Mozilla når
      det brukes <command>trust</command> verktøy fra
      <application>p11-kit</application> for å operere på tillitslageret.
    </para>

    <para>
      For å installere de forskjellige sertifikatlagrene, installer først
      <application>make-ca</application> skriptet til riktig plassering.
      Som <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>make install &amp;&amp;
install -vdm755 /etc/ssl/local</userinput></screen>

   <para>
     Som <systemitem class="username">root</systemitem> bruker, etter
     installering <xref linkend="p11-kit"/>, last ned sertifikatkilden og
     klargjør for systembruk med følgende kommando:
   </para>

    <note>
      <para>
        Hvis du kjører skriptet en gang til med samme versjon av
        <filename>certdata.txt</filename>, for eksempel for å oppdatere
        lagre når <application>make-ca</application> er oppgradert, eller for å
        legge til flere lagre etter hvert som den nødvendige programvaren er installert,
        erstatt <parameter>-g</parameter> bryteren med
        <parameter>-r</parameter> bryter i kommandolinjen. Hvis innpakning,
        kjør <command>make-ca --help</command> for å se alle tilgjengelige kommandoers
        linjealternativer.
      </para>
    </note>

<screen role="root"><userinput>/usr/sbin/make-ca -g</userinput></screen>

    <para>
      Du bør periodisk oppdatere lagrene med kommandoen ovenfor,
      enten manuelt eller via en <phrase revision="sysv">cron job.</phrase>
      <phrase revision="systemd">systemd timer. En timer er installert i
      <filename>/usr/lib/systemd/system/update-pki.timer</filename> det, hvis
      aktivert, vil se etter oppdateringer ukentlig.</phrase><phrase
      revision="sysv">Hvis du har installert <xref linkend="fcron"/> og
      fullført avsnittet om periodiske jobber, kjør</phrase> <phrase
      revision="systemd">Kjør</phrase> følgende kommandoer, som
      <systemitem class="username">root</systemitem> bruker, for å <phrase
      revision="sysv">opprette en ukentlig cron jobb:</phrase><phrase
      revision="systemd">aktiver systemd timer:</phrase>
    </para>

<screen role="nodump" revision="sysv"><userinput>cat &gt; /etc/cron.weekly/update-pki.sh &lt;&lt; "EOF" &amp;&amp;
<literal>#!/bin/bash
/usr/sbin/make-ca -g</literal>
EOF
chmod 754 /etc/cron.weekly/update-pki.sh</userinput></screen>

<screen role="root" revision="systemd"><userinput>systemctl enable update-pki.timer</userinput></screen>

  </sect2>

  <sect2 role="configuration" id="make-ca-config">
    <title>Konfigurere make-ca</title>

    <para>
      For de fleste brukere er ingen ekstra konfigurasjon nødvendig, men
      standard <filename>certdata.txt</filename> filen levert av make-ca
      er hentet fra mozilla-release grenen, og er modifisert for å gi en
      Mercurial revisjon. Dette vil være riktig versjon for de fleste systemer.
      Det er flere andre varianter av filen tilgjengelig for bruk som kan
      foretrekkes av en eller annen grunn, inkludert filene som leveres med
      Mozilla produkter i denne boken. RedHat og OpenSUSE, for eksempel, bruker
      versjonen inkludert i <xref linkend="nss"/>. Ytterligere oppstrømsnedlastinger
      er tilgjengelig på lenkene som er inkludert i
      <filename>/etc/make-ca/make-ca.conf.dist</filename>. Bare kopier
      filen til
      <filename>/etc/make-ca.conf</filename> og rediger etter behov.
    </para>

    <indexterm zone="make-ca make-ca-config">
      <primary sortas="e-etc-make-ca-conf">/etc/make-ca.conf</primary>
    </indexterm>

    <bridgehead renderas="sect3">Om tillitsargumenter</bridgehead>

    <para>
      Det er tre tillitstyper som er anerkjent av
      <application>make-ca</application> skriptet, SSL/TLS, S/Mime, og code
      signing. For <application>OpenSSL</application>, er disse
      <parameter>serverAuth</parameter>,
      <parameter>emailProtection</parameter>, og
      <parameter>codeSigning</parameter> henholdsvis. Hvis en av de tre
      tillitsargumentene er utelatt, er sertifikatet verken klarert, eller
      avvist for den rollen. Klienter som bruker
      <application>OpenSSL</application> eller <application>NSS</application>
      som støter på dette sertifikatet vil gi en advarsel til brukeren.
      Klienter som bruker
      <application>GnuTLS</application> uten
      <application>p11-kit</application> støtte er ikke klar over klarerte
      sertifikater. For å inkludere denne CA i
      <filename>ca-bundle.crt</filename>,
      <filename>email-ca-bundle.crt</filename>, eller
      <filename>objsign-ca-bundle.crt</filename> filer
      (<application>GnuTLS</application> gamle pakker), den må ha
      passende tillitsargumenter.
    </para>

    <bridgehead renderas="sect3">Legg til Flere CA Sertifikater</bridgehead>

    <para>
      <filename class="directory">/etc/ssl/local</filename> mappen
      er tilgjengelig for å legge til flere CA sertifikater til systemtillitslageret.
      Denne katalogen brukes også til å lagre sertifikater som ble lagt til eller
      endret i systemtillitslageret av <xref linkend="p11-kit"/> sånn at
      tillitsverdier opprettholdes på tvers av oppgraderinger. Filer i denne mappen må
      være i <application>OpenSSL</application> klarert sertifikatformat.
      Sertifikater importert ved hjelp av <command>trust</command> verktøyet fra
      <xref linkend="p11-kit"/> vil bruke x509 Extended Key Usage verdiene
      for å tildele standard tillitsverdier for systemankrene.
    </para>

    <para>Hvis du trenger å overstyre tillitsverdier, eller på annen måte trenger å opprette
      et <application>OpenSSL</application> klarert sertifikat manuelt
      fra en vanlig PEM kodet fil, må du legge til tillitsargumenter til
      <command>openssl</command> kommandoen, og opprette et nytt sertifikat.
      For eksempel ved å bruke <ulink url="http://www.cacert.org/">CAcert</ulink>
      roots, hvis du vil stole på begge for alle tre rollene, følgende
      kommandoer vil opprette passende OpenSSL klarerte sertifikater (kjør som
      <systemitem class="username">root</systemitem> etter at <xref
      linkend="wget"/> er installert):
    </para>

<screen role="nodump"><userinput>wget http://www.cacert.org/certs/root.crt &amp;&amp;
wget http://www.cacert.org/certs/class3.crt &amp;&amp;
openssl x509 -in root.crt -text -fingerprint -setalias "CAcert Class 1 root" \
        -addtrust serverAuth -addtrust emailProtection -addtrust codeSigning \
        > /etc/ssl/local/CAcert_Class_1_root.pem &amp;&amp;
openssl x509 -in class3.crt -text -fingerprint -setalias "CAcert Class 3 root" \
        -addtrust serverAuth -addtrust emailProtection -addtrust codeSigning \
        > /etc/ssl/local/CAcert_Class_3_root.pem &amp;&amp;
/usr/sbin/make-ca -r</userinput></screen>

    <bridgehead renderas="sect3">Overstyrer Mozilla Tillit</bridgehead>

    <para>
      Noen ganger kan det være tilfeller der du ikke er enig med
      Mozillas inkludering av en bestemt sertifiseringsinstans. Hvis du vil
      overstyre standardtilliten til en bestemt CA, lag ganske enkelt en kopi av
      det eksisterende sertifikatet i <filename
      class="directory">/etc/ssl/local</filename> med ulik tillitsargumenter.
      For eksempel, hvis du ønsker å mistro
       "Makebelieve_CA_Root" filen, kjør følgende kommandoer:
    </para>

<screen role="nodump"><userinput>openssl x509 -in /etc/ssl/certs/Makebelieve_CA_Root.pem \
             -text \
             -fingerprint \
             -setalias "Disabled Makebelieve CA Root" \
             -addreject serverAuth \
             -addreject emailProtection \
             -addreject codeSigning \
       > /etc/ssl/local/Disabled_Makebelieve_CA_Root.pem &amp;&amp;
/usr/sbin/make-ca -r</userinput></screen>

  </sect2>

  <sect2 role="configuration" id="make-ca-python">
    <title>Bruke make-ca med Python3</title>

    <para>
      Når <application>Python3</application> ble installert i LFS inkluderte det
      <application>pip3</application> modulen med forhandlersertifikater
      fra <application>Certifi</application> modulen. Det var nødvendig,
      men det betyr at når som helst <command>pip3</command> brukes kan den referere
      til disse sertifikatene, først og fremst når du oppretter et virtuelt miljø eller når
      installere en modul med alle dens wheel avhengigheter på en gang.
    </para>

    <para>
      Det anses generelt at systemadministratoren bør være
      ansvarlig for hvilke sertifikater som er tilgjengelige. Nå som <xref
      linkend="make-ca"/> og <xref linkend="p11-kit"/> har blitt installert og
      <application>make-ca</application> er konfigurert, er det mulig å
      få <command>pip3</command> til å bruke systemsertifikatene.
    </para>

    <para>
      Sertifikatene som er installert i LFS er et øyeblikksbilde fra når en
      trukket inn versjon av <application>Certifi</application> ble laget. Hvis
      du regelmessig oppdaterer systemsertifikatene, vil leverandørversjonen
      bli utdatert.
    </para>

    <para>
      For å bruke systemsertifikatene i <application>Python3</application> bør
      du sette <envar>_PIP_STANDALONE_CERT</envar> til å peke på dem, f.eks
      for <application>bash</application> skallet:
    </para>

<screen><userinput>export _PIP_STANDALONE_CERT=/etc/pki/tls/certs/ca-bundle.crt</userinput></screen>

    <warning>
      <para>
        Hvis du har laget virtuelle miljøer, for eksempel når du tester moduler,
        og de inkluderer <application>Requests</application> og
        <application>Certifi</application> moduler i <filename
        class="directory">~/.local/lib/python3.11/</filename> så vil de lokale
        modulene bli brukt i stedet for systemsertifikatene med mindre du
        fjerner de lokale modulene.
      </para>
    </warning>

    <para>
      For å bruke systemsertifikatene i <application>Python3</application> med
      BLFS profilene legg til følgende variabel til systemet eller personlig
      profil:
    </para>

<screen role="root"><userinput>mkdir -pv /etc/profile.d &amp;&amp;
cat &gt; /etc/profile.d/pythoncerts.sh &lt;&lt; "EOF"
<literal># Begin /etc/profile.d/pythoncerts.sh

export _PIP_STANDALONE_CERT=/etc/pki/tls/certs/ca-bundle.crt

# End /etc/profile.d/pythoncerts.sh</literal>
EOF</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title>Innhold</title>

    <segmentedlist>
      <segtitle>Installerte Programmer</segtitle>
      <segtitle>Installerte Mapper</segtitle>

      <seglistitem>
        <seg>make-ca</seg>
        <seg>/etc/ssl/{certs,local} og
        /etc/pki/{nssdb,anchors,tls/{certs,java}}</seg>
      </seglistitem>
    </segmentedlist>

   <variablelist>
      <bridgehead renderas="sect3">Korte Beskrivelser</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="make-ca-bin">
        <term><command>make-ca</command></term>
        <listitem>
          <para>
            er et skallskript som tilpasser en gjeldende versjon av
            <filename>certdata.txt</filename>, og gjør den klar til bruk
            som systemtillitslageret
          </para>
          <indexterm zone="make-ca make-ca">
            <primary sortas="b-make-ca">make-ca</primary>
          </indexterm>
        </listitem>
      </varlistentry>
   </variablelist>

  </sect2>

</sect1>
