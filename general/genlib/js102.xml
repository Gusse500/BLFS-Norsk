<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

<!-- for when firefox and js91 use same version
  <!ENTITY ff91-version       "&firefox-version;">
  and when they are on different versions - keep this for when
  we have moved to next firefox-esr (ff-91) and JS  has not moved
  <!ENTITY ff91-version       "&JS91-version;"> -->

  <!ENTITY ff102-version       "&firefox-version;">
  <!ENTITY js102-download-http "&mozilla-http;/firefox/releases/&JS102-version;esr/source/firefox-&JS102-version;esr.source.tar.xz">
  <!ENTITY js102-download-ftp  " ">
  <!ENTITY js102-md5sum        "&firefox-md5;">
  <!ENTITY js102-size          "457 MB">
  <!ENTITY js102-buildsize     "3.3 GB (38 MB installert etter fjerning av 34 MB statisk lib)">
  <!ENTITY js102-time          "1.8 SBU (med parallellitet=4)">
]>

<sect1 id="js102" xreflabel="JS-&JS102-version;">
  <?dbhtml filename="js102.html"?>


  <title>JS-&JS102-version;</title>

  <indexterm zone="js102">
    <primary sortas="a-js102">js102</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduksjon til JS</title>

    <para>
      <application>JS</application> (også referert til som
      <application>SpiderMonkey</application>) er Mozillas JavaScript og
      WebAssembly Engine, skrevet i C++ og Rust.
      I BLFS er kildekoden til JS hentet fra Firefox.
    </para>

    <!-- To editors: make sure polkit work with mozjs before
         tagging mozjs.  -->
    &lfs113_checked;

    <bridgehead renderas="sect3">Pakkeinformasjon</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nedlasting (HTTP): <ulink url="&js102-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting (FTP): <ulink url="&js102-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting MD5 sum: &js102-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlastingsstørrelse: &js102-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert diskplass som kreves: &js102-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert byggetid: &js102-time;
        </para>
      </listitem>
    </itemizedlist>
<!--
    <bridgehead renderas="sect3">Ytterligere Nedlastinger</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nødvendig oppdatering:
          <ulink url="&patch-root;/js-&JS91-version;-python_3_10-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>
-->
    <bridgehead renderas="sect3">JS102 Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Påkrevd</bridgehead>
    <para role="required">
      <xref linkend="icu"/>,
      <xref linkend="rust"/>, og
      <xref linkend="which"/>
    </para>

    <bridgehead renderas="sect4">Anbefalt</bridgehead>
    <para role="recommended">
      <!-- If clang is installed, it will be used instead of gcc.
           gcc does not work for 32-bit system w/o -msse2 -mfpmath=sse:
           https://bugzilla.mozilla.org/show_bug.cgi?id=1729459 -->
      <xref linkend="llvm"/> (med <application>Clang</application>,
      kreves for 32-bits systemer uten SSE2 funksjoner)
    </para>

    <!-- It seems nasm is only used for aarch64-win64. -->
    <!--bridgehead renderas="sect4">Valgfri</bridgehead>
    <para role="optional">
      <xref linkend="nasm"/>
    </para-->

    <para condition="html" role="usernotes">
      Brukernotater: <ulink url="&blfs-wiki;/js102"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installasjon av JS</title>

    <note>
      <para>
        I motsetning til de fleste andre pakker i BLFS, krever instruksjonene nedenfor at du
        untarer <filename>firefox-&JS102-version;esr.tar.xz</filename> og
        endre til <filename>firefox-&JS102-version;</filename> mappen.
      </para>

      <para>
        Å pakke ut tarballen
        vil tilbakestille tillatelsene til gjeldende mappe til 0755 hvis du
        har tillatelse til å gjøre det. Hvis du gjør dette i en mappe hvor
        den klebrige biten er satt, slik
        som <filename class="directory">/tmp</filename> vil det ende med en
        feilmelding:
      </para>

<literallayout>tar: .: Cannot utime: Operation not permitted
tar: .: Cannot change mode to rwxr-xr-t: Operation not permitted
tar: Exiting with failure status due to previous errors
</literallayout>

      <para>
        Dette avsluttes med ikke-null status, men det betyr
        <emphasis>IKKE</emphasis> at det er et reelt problem.
        Ikke untar som <systemitem class="username">root</systemitem> bruker
        i en mappe der den klebrige biten er satt - det vil deaktivere den.
      </para>

    </note>
<!-- not needed when using clang.  Upstream bug at
     https://bugzilla.mozilla.org/show_bug.cgi?id=1729459

    <para>
      Hvis du bygger på en 32-bits maskin, løser følgende sed et problem
      med en inkompatibel <quote>dobbel</quote> type i en deklarasjonsfil:
    </para>

<screen><userinput>case "$(uname -m)" in
    i?86) sed -e '/typedef[ ]*double/s/double/long double/' \
              -i modules/fdlibm/src/math_private.h ;;
esac</userinput></screen>
-->
    <para>
      Installer <application>JS</application> ved å kjøre følgende
      kommandoer:
    </para>

    <note>
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
         href="../../xincludes/mozshm.xml"/>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
         href="../../xincludes/mozconfigure.xml"/>

      <para>
        Å kompilere C++-koden respekterer $MAKEFLAGS og er standard til 'j1',
        rustkoden vil bruke alle prosessorer.
      </para>
    </note>

    <para>
      Fjern først et foreldet flagg i python koden, som har blitt fjernet
      i python-3.11:
    </para>

<screen><userinput>grep -rl \"rU\" | xargs sed -i 's/"rU"/"r"/'</userinput></screen>

    <para>
      Så kjør:
    </para>

<screen><userinput>mkdir obj &amp;&amp;
cd    obj &amp;&amp;

sh ../js/src/configure.in --prefix=/usr            \
                          --with-intl-api          \
                          --with-system-zlib       \
                          --with-system-icu        \
                          --disable-jemalloc       \
                          --disable-debug-symbols  \
                          --enable-readline        &amp;&amp;
make</userinput></screen>

    <para>
      For å kjøre JS testpakken, kjør:
      <command>make -C js/src check-jstests
      JSTESTS_EXTRA_ARGS="--timeout 300 --wpt=disabled"</command>.
      Det anbefales å omdirigere utdataene til en logg.
      <!-- recheck when ICU gets upgraded -->
      <!-- Still true with 102 -renodr -->
      Fordi vi bygger med system ICU, mer enn hundre tester
      (av totalt mer enn 50 000) er kjent for å mislykkes.
    </para>
    <para>
      For å kjøre JIT testpakken, kjør:
      <command>make -C js/src check-jit-test
      JITTEST_EXTRA_ARGS="--timeout 300"</command>.
    </para>

    <caution>
      <para>
        Et problem i installasjonsprosessen forårsaker at ethvert kjørende program som
        lenker til JS102 delt bibliotek (for eksempel GNOME Shell) å krasje hvis
        JS102 oppgraderes eller installeres på nytt. For å omgå dette problemet, fjern
        den gamle versjonen av JS102 delte bibliotek før installasjon:
      </para>

<screen role="root"><userinput>rm -fv /usr/lib/libmozjs-102.so</userinput></screen>
    </caution>

    <para>
      Nå, som <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>make install &amp;&amp;
rm -v /usr/lib/libjs_static.ajs &amp;&amp;
sed -i '/@NSPR_CFLAGS@/d' /usr/bin/js102-config</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Parameterforklaringer</title>

    <para>
      <command>sh ../js/src/configure.in</command>:
      <filename>configure.in</filename> er egentlig et skallskript, men
      den kjørbare biten er ikke satt i tillatelsesmodus, så det er nødvendig
      å eksplisitt kjøre den med <command>sh</command>.
    </para>

    <para>
      <parameter>--with-intl-api</parameter>: Dette muliggjør
      internasjonaliseringsfunksjoner som kreves av
      <application>Gjs</application>.
    </para>

    <para>
      <parameter>--with-system-*</parameter>: Disse parameterne tillater byggesystemet
      å bruke systemversjoner av bibliotekene ovenfor. Dette kreves for
      stabilitet.
    </para>

    <para>
      <parameter>--enable-readline</parameter>: Denne bryteren aktiverer Readline
      støtte i JS skallet.
    </para>

    <para>
      <parameter>--disable-jemalloc</parameter>: Denne bryteren deaktiverer
      intern minneallokator brukt i JS102. jemalloc er kun beregnet på
      Firefox nettlesermiljøet. For andre applikasjoner som bruker JS102,
      applikasjonen kan krasje som elementer tildelt i jemalloc allokatoren
      er frigjort på system (glibc) allokator.
    </para>

    <para>
      <parameter>--disable-debug-symbols</parameter>: Ikke generer feilsøkings
      symboler siden de er veldig store og de fleste brukere ikke trenger det. Fjern
      det hvis du vil feilsøke JS102.
    </para>

    <para>
      <command>rm -v /usr/lib/libjs_static.ajs</command>: Fjern et stort
      statisk bibliotek som ikke brukes av noen BLFS pakke.
    </para>

    <para>
      <command>sed -i '/@NSPR_CFLAGS@/d' /usr/bin/js102-config</command>:
      Forhindrer <command>js102-config</command> fra å bruke buggy CFLAGS.
    </para>

    <para>
      <option><envar>CC=gcc CXX=g++</envar></option>: BLFS pleide å
      foretrekke å bruke gcc og g++ i stedet for oppstrøms standardinnstillinger for
      <application>clang</application> programmer. Med utgivelsen av
      gcc-12 bygget tar lengre tid med gcc og g++, først og fremst fordi
      ekstra advarsler, og er større. Send disse miljøvariablene
      til konfigureringsskriptet hvis du ønsker å fortsette å bruke gcc, g++
      (ved å eksportere dem og deaktivere dem etter installasjonen, eller ganske enkelt
      forberede dem før
      <command>sh ../js/src/configure.in</command> kommandoen).  Hvis du
      bygger på et 32-bits system, se også nedenfor.
    </para>

    <para>
      <option><envar>CXXFLAGS="-msse2 -mfpmath=sse"</envar></option>:
      Bruk SSE2 i stedet for 387 for flytende komma med dobbel presisjon
      operasjoner. Det er nødvendig av GCC for å tilfredsstille forventningene til
      oppstrøms (Mozilla) utviklere med flytende komma-aritmetikk.
      Bruk den hvis du bygger denne pakken på et 32-bits system med
      GCC (hvis Clang ikke er installert eller GCC er eksplisitt spesifisert).
      Merk at dette vil føre til at JS krasjer på en prosessor uten SSE2
      evne. Hvis du kjører systemet på en så gammel prosessor,
      Clang er strengt nødvendig. Denne innstillingen er ikke nødvendig på 64-bit
      systemer fordi alle 64-bit x86-prosessorer støtter SSE2 og 64-bit
      kompilatorer (både Clang og GCC) bruker SSE2 som standard.
    </para>
  </sect2>

  <sect2 role="content">
    <title>Innhold</title>

    <segmentedlist>
      <segtitle>Installerte Programmer</segtitle>
      <segtitle>Installerte Biblioteker</segtitle>
      <segtitle>Installerte Mapper</segtitle>

      <seglistitem>
        <seg>
          js102 og js102-config
        </seg>
        <seg>
          libmozjs-102.so
        </seg>
        <seg>
          /usr/include/mozjs-102
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Korte Beskrivelser</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="js102-js102">
        <term><command>js102</command></term>
        <listitem>
          <para>
            gir et kommandolinjegrensesnitt til
            <application>JavaScript</application> motoren
          </para>
          <indexterm zone="js102 js102">
            <primary sortas="b-js102">js102</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="js102-config">
        <term><command>js102-config</command></term>
        <listitem>
          <para>
            brukes til å finne JS kompilatoren og linkerflaggene
          </para>
          <indexterm zone="js102 js102-config">
            <primary sortas="b-js102-config">js102-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmozjs-102">
        <term><filename class="libraryfile">libmozjs-102.so</filename></term>
        <listitem>
          <para>
            inneholder Mozilla JavaScript API funksjonene
          </para>
          <indexterm zone="js102 libmozjs-102">
            <primary sortas="c-libmozjs102">libmozjs-102.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

</sect1>
