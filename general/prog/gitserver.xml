<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
  <!ENTITY gitgid "58">
  <!ENTITY gituid "58">
]>

<sect1 id="gitserver" xreflabel="Kjøre en Git server">
  <?dbhtml filename="gitserver.html"?>


  <title>Kjøre en Git server</title>

  <sect2 role="package">
    <title>Introduksjon</title>

    <para>
      Denne delen vil beskrive hvordan du setter opp, administrerer og sikrer en
      <application>git</application> server. <application>Git</application>
      har mange alternativer tilgjengelig. For mer detaljert dokumentasjon se
      <ulink url="https://git-scm.com/book/en/v2"/>.
    </para>

    <bridgehead renderas="sect3">Server Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Påkrevd</bridgehead>
    <para role="required">
      <xref linkend="git"/> og
      <xref linkend="openssh"/>
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Sette opp en Git Server</title>

    <para>
      Følgende instruksjoner vil installere en
      <application>git</application> server. Det vil bli satt
      opp til å bruke <application>OpenSSH</application> som sikker
      ekstern tilgangsmetode.
    </para>

    <para>
      Konfigurasjon av serveren består av følgende trinn:
    </para>

    <sect3>
      <title>1. Sette opp brukere, grupper og tillatelser</title>

      <para>
        Du må være bruker <systemitem class='username'>root</systemitem>
        for den første delen av konfigurasjonen. Opprett <systemitem
        class="username">git</systemitem> bruker og gruppe og sett en ubrukelig
        passordhash med følgende kommandoer:
      </para>

<screen role="root"><userinput>groupadd -g &gitgid; git &amp;&amp;
useradd -c "git Owner" -d /home/git -m -g git -s /usr/bin/git-shell -u &gituid; git &amp;&amp;
sed -i '/^git:/s/^git:[^:]:/git:NP:/' /etc/shadow</userinput></screen>

      <para>
        Sett inn en ubrukelig passordhash (erstatter <literal>!</literal>
        med <literal>NP</literal>) låser opp kontoen, men den kan ikke brukes
         for å logge på via passordautentisering. Det kreves av
        <application>sshd</application> for å fungere skikkelig.
        Deretter oppretter du noen filer og mapper i hjemmemappen til git brukeren
        som gir tilgang til git depotet ved å bruke ssh nøkler.
      </para>

<screen role="root"><userinput>install -o git -g git -dm0700 /home/git/.ssh &amp;&amp;
install -o git -g git -m0600 /dev/null /home/git/.ssh/authorized_keys</userinput></screen>

      <para>
        For enhver utvikler som bør ha tilgang til depotet
        legg til hans/hennes offentlige ssh nøkkel til <filename>/home/git/.ssh/authorized_keys</filename>.
        Først må du legge til noen alternativer for å hindre brukere fra å bruke
        tilkobling til git for portvideresending til andre maskiner
        som git serveren kan nå.
      </para>

<screen role="nodump"><userinput>echo -n "no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty " >> /home/git/.ssh/authorized_keys &amp;&amp;
cat &lt;user-ssh-key&gt; &gt;&gt; /home/git/.ssh/authorized_keys</userinput></screen>

      <para>
        Det er også nyttig å angi standardnavnet til den første grenen
        av nye depoter ved å endre git konfigurasjonen. Som
        <systemitem class='username'>root</systemitem> bruker, kjør:
      </para>

<screen role="nodump"><userinput>git config --system init.defaultBranch trunk</userinput></screen>

      <para>
        Legg til slutt til <filename>/usr/bin/git-shell</filename> inngang til
        <filename>/etc/shells</filename> konfigurasjonsfil. Dette skallet
        har blitt satt i <systemitem class='username'>git</systemitem>
        brukerprofil og sørger for at kun git relaterte handlinger
        kan utføres:
      </para>

<screen role="root"><userinput>echo "/usr/bin/git-shell" &gt;&gt; /etc/shells</userinput></screen>

    </sect3>

    <sect3>
      <title>2. Lag et git depot</title>

      <para>
        Depotet kan være hvor som helst på filsystemet. Det er
        viktig at git brukeren har lese-/skrivetilgang til den
        plasseringen. Vi bruker <filename class="directory">/srv/git</filename>
        som basismappe. Lag et nytt <application>git</application>
        depot med følgende kommandoer (som
        <systemitem class="username">root</systemitem> bruker):
      </para>

      <note>
        <para>
          I alle instruksjonene nedenfor bruker vi <emphasis>project1</emphasis>
          som et eksempel på depotnavn. Du bør navngi depotet ditt
          som et kort beskrivende navn for ditt spesifikke prosjekt.
        </para>
      </note>

<screen role="root"><userinput>install -o git -g git -m755 -d /srv/git/project1.git &amp;&amp;
cd /srv/git/project1.git                             &amp;&amp;
git init --bare                                      &amp;&amp;
chown -R git:git .</userinput></screen>

    </sect3>

    <sect3>
      <title>3. Fyll ut depotet fra et klientsystem</title>

      <note>
        <para>
          Alle instruksjonene i denne delen og den neste bør
          gjøres på et brukersystem, ikke på serversystemet.
        </para>
      </note>

      <para>
        Nå som depotet er opprettet, kan det brukes av
        utviklere til å legge inn noen filer i den. Når ssh nøkkelen til
        brukeren er importert til git sin <filename>authorized_keys</filename>
        fil, kan brukeren samhandle med depotet.
      </para>

      <para>
        En minimal konfigurasjon bør være tilgjengelig på utviklerens
        system som spesifiserer brukernavnet og e-postadressen.
        Lag denne minimale konfigurasjonsfilen på klientsiden:
      </para>

<screen role="nodump"><userinput>cat &gt; ~/.gitconfig &lt;&lt;EOF
[user]
        name = &lt;users-name&gt;
        email = &lt;users-email-address&gt;
EOF</userinput></screen>

      <para>
        På utviklerens maskin, sett opp noen filer som skal skyves
        til depotet som det første innholdet:
      </para>

      <note>
        <para>
          <emphasis>gitserver</emphasis> begrepet som brukes nedenfor
           skal være vertsnavnet (eller ip adressen) til git serveren.
        </para>
      </note>

<screen role="nodump"><userinput>mkdir myproject
cd myproject
git init --initial-branch=trunk
git remote add origin git@gitserver:/srv/git/project1.git
cat &gt;README &lt;&lt;EOF
This is the README file
EOF
git add README
git commit -m 'Initial creation of README'
git push --set-upstream origin trunk</userinput></screen>

      <para>Det første innholdet blir nå sendt til serveren og
        er tilgjengelig for andre brukere. På den gjeldende maskinen er
        argumentet <literal>--set-upstream origin trunk</literal> er
        ikke lenger nødvendig siden det lokale depotet er
        koblet til det eksterne depotet. Påfølgende dytt
        kan utføres som
      </para>

<screen role="nodump"><userinput>git push</userinput></screen>

      <para>
        Andre utviklere kan nå klone depotet og gjøre
        endringer i innholdet (så lenge ssh nøklene deres
        har blitt installert):
      </para>

<screen role="nodump"><userinput>git clone git@gitserver:/srv/git/project1.git
cd project1
vi README
git commit -am 'Fix for README file'
git push</userinput></screen>

      <note>
        <para>
          Dette er et veldig grunnleggende serveroppsett basert på
          <application>OpenSSH</application> adgang. Alle utviklere bruker
          <systemitem class="username">git</systemitem> brukeren for å utføre
          handlinger på depotet og endringene brukere foretar kan
          skilles ut som det lokale brukernavnet (se
          <filename>~/.gitconfig</filename>) er registrert i
          endringssett.
        </para>
      </note>

      <para>
        Tilgangen er begrenset av de offentlige nøklene som er lagt til git sin
        <filename>authorized_keys</filename> filen og det er ingen
        mulighet for publikum til å eksportere/klone depotet. For å
        aktiver dette, fortsett med trinn 4 for å sette opp git serveren
        for offentlig lesetilgang.
      </para>

      <para>
        I URLen som brukes til å klone prosjektet, den absolutte banen (her
        <filename>/srv/git/project1.git</filename>) må spesifiseres
        da depotet ikke er i git sin hjemmemappe, men i
        <filename class="directory">/srv/git</filename>. For å bli kvitt
        eksponeringen som avslører strukturen til serverinstallasjonen, en symbolkobling
        kan legges til i git sin hjemmemappe for hvert prosjekt som dette:
      </para>
<screen role="nodump"><userinput>ln -svf /srv/git/project1.git /home/git/</userinput></screen>

      <para>
        Nå kan depotet klones ved bruk av
      </para>
<screen role="nodump"><userinput>git clone git@gitserver:project1.git</userinput></screen>

    </sect3>

    <sect3 id="gitserver-init">
      <title>4. Konfigure Serveren</title>

      <para>
        Oppsettet beskrevet ovenfor gjør et depot tilgjengelig for
        autentiserte brukere (med å gi den offentlige ssh nøkkelfilen).
        Det er også en enkel måte å publisere
        depotet til uautentiserte brukere &mdash; selvfølgelig uten
        skriveadgang.
      </para>

      <para>
        Kombinasjonen av tilgang via ssh (for autentiserte brukere) og
        eksport av arkiver til uautentiserte brukere via
        nissen er i de fleste tilfeller nok for en utviklingsside.
      </para>

      <note>
        <para>
          Nissen vil være tilgjengelig på port <literal>9418</literal>
          som standard. Sørg for at brannmuroppsettet tillater
          tilgang til denne porten.
        </para>
      </note>

      <para revision="sysv">
        For å starte serveren ved oppstart, installer git-daemon
        oppstartskriptet inkludert i <xref linkend="bootscripts"/> pakken:
      </para>

      <indexterm zone="gitserver gitserver-init" revision="sysv">
        <primary sortas="f-git">git</primary>
      </indexterm>

<screen role="root" revision="sysv"><userinput>make install-git-daemon</userinput></screen>

      <para revision="systemd">
        For å starte serveren ved oppstart, installer
        <filename>git-daemon.service</filename> enheten fra
        <xref linkend="systemd-units"/> pakken:
      </para>

      <indexterm zone="gitserver gitserver-init" revision="systemd">
        <primary sortas="f-gitserve">gitserve</primary>
      </indexterm>

<screen role="root" revision="systemd"><userinput>make install-git-daemon</userinput></screen>

      <para>
        For å tillate <application>git</application> å eksportere et
        depot, en fil som heter <filename>git-daemon-export-ok</filename>
        kreves i hver depotmappe på serveren.
        Filen trenger ikke noe innhold, bare dens eksistens muliggjør, dens fravær
        deaktiverer eksporten av det depotet.
      </para>

<screen role="root"><userinput>touch /srv/git/project1.git/git-daemon-export-ok</userinput></screen>

      <para revision="sysv">
        Skriptet for å starte git nissen bruker noen standardverdier
        internt. Det viktigste er veien til depotmappen
        som er satt til <filename class="directory">/srv/git</filename>.
        I tilfelle du av en eller annen grunn har opprettet depotet i en
        annen plassering, må du fortelle oppstartsskriptet hvor
        depot er å finne. Dette kan oppnås ved å lage en
        konfigurasjonsfilen navngitt <filename>/etc/sysconfig/git-daemon</filename>.
        Denne konfigurasjonsfilen vil bli importert hvis den eksisterer, noe som betyr at den er det
        valgfri. Filen kan se ut som:</para>
<screen revision="sysv">
# Begin /etc/sysconfig/git-daemon

# Specify the location of the git repository
GIT_BASE_DIR="/srv/git/"

# Directories added to whitelist
DFT_REPO_DIR="$GIT_BASE_DIR"

# Add extra options which will appended to the 'git daemon'
# command executed in the boot script
GIT_DAEMON_OPTS=""

# End /etc/sysconfig/git-daemon
</screen>
      <para revision="systemd">
        Sammen med <filename>git-daemon.service</filename> enheten, en
        konfigurasjonsfil navngitt <filename>/etc/default/git-daemon</filename>
        har blitt installert. Se gjennom denne konfigurasjonsfilen for å matche dine
        behov.
      </para>

      <para>
        Det er bare tre alternativer å angi i konfigurasjonsfilen:
        <itemizedlist>
          <listitem>
            <para>
              GIT_BASE_DIR=&lt;dirname&gt;
            </para>
            <para>Spesifiser plasseringen av git depoene.
              Relative stier som brukes når du får tilgang til nissen vil
              oversettes i forhold til denne mappen.
            </para>
          </listitem>
          <listitem>
            <para>
              DFT_REPO_DIR=&lt;dirname&gt;
            </para>
            <para>Denne mappen er lagt til den hvite listen over tillatte
              mapper. Denne variabelen kan inneholde flere mappenavn,
              men er vanligvis satt lik <literal>GIT_BASE_DIR</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              GIT_DAEMON_OPTS=&lt;options&gt;
            </para>
            <para>
              I tilfelle spesielle alternativer til <command>git daemon</command>
              kommandoen er nødvendig, må de spesifiseres i denne innstillingen.
              Et eksempel kan være å justere portnummeret som nissen
              lytter på. I dette tilfellet, legg til <literal>--port=&lt;port
              number&gt;</literal> til denne variabelen. For mer informasjon
              om hvilke alternativer som kan angis, ta en titt på utdataene til
              <command>git daemon --help</command>.
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        Etter å ha startet nissen, kan uautentiserte brukere klone eksporterte
        depoer ved å bruke
      </para>
<screen role="nodump"><userinput>git clone git://gitserver/project1.git</userinput></screen>

      <para>
        Som basismappen er <filename class="directory">/srv/git</filename>
        standard (eller satt til en egendefinert verdi i konfigurasjonen),
        <application>git</application> tolker den innkommende banen
         (/project1.git) i forhold til den basismappen slik at depotet
        i <filename class="directory">/srv/git/project1.git</filename> er
        servert.
      </para>

    </sect3>

  </sect2>

</sect1>
