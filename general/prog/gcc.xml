<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY gcc-download-http  "&gnu-http;/gcc/gcc-&gcc-version;/gcc-&gcc-version;.tar.xz">
  <!ENTITY gcc-download-ftp   "&gnu-ftp;/gcc/gcc-&gcc-version;/gcc-&gcc-version;.tar.xz">
  <!-- Update this also on the grub-uefi page -->
  <!ENTITY gcc-md5sum         "e0e48554cc6e4f261d55ddee9ab69075">
  <!ENTITY gcc-size           "84 MB">
  <!ENTITY gcc-buildsize      "13 GB (2,9 GB installert med alle oppførte språk; legg til 1,5 GB for tester)">
  <!ENTITY gcc-time           "13 SBU (legg til 29 SBU for tester; begge med parallellitet=8)">
]>

<sect1 id="gcc" xreflabel="GCC-&gcc-version;">
  <?dbhtml filename="gcc.html" ?>


  <title>GCC-&gcc-version;</title>

  <indexterm zone="gcc">
    <primary sortas="a-gcc-5-0">GCC-&gcc-version;</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduksjon til GCC</title>

    <para>
      <application>GCC</application> pakken inneholder GNU kompilatoren
      samlingen. Denne siden beskriver installasjonen av kompilatorer for
      følgende språk: C, C++, Fortran, Objective C, Objective C++, Go, og Modula2.
      Siden C og C++ er installert i LFS, er denne siden enten for å oppgradere
      C og C++, eller for å installere ekstra kompilatorer.
    </para>

    <note>
      <para>
        Ytterligere språk, blant annet D og Ada, er tilgjengelige i
        samlingen. D og Ada har et binært oppstartskrav for den første
        installasjon, så deres installasjon er ikke beskrevet her. For å installere
        dem, kan du fortsette på samme måte som nedenfor etter installasjonen
        av den tilsvarende kompilatoren fra en binær pakke, legg til
        <option>ada</option> eller <option>d</option> til
        <parameter>--enable-languages</parameter> linjen.
      </para>
    </note>

    &lfs120_checked;

    <caution>
      <para>
        Hvis du oppgraderer <application>GCC</application> fra en
        versjon før &gcc-version;, da må du være forsiktig med å kompilere 3rd
        parts kjernemoduler. Du bør sørge for at kjernen og alle dens
        opprinnelige moduler også er kompilert med samme versjon av
        <application>GCC</application> som du bruker til å bygge tredjepartsmodulen.
        Dette problemet påvirker ikke den opprinnelige kjernen (og kjernemoduler) oppdateringer,
        siden instruksjonene nedenfor er en fullstendig reinstallasjon av
        <application>GCC</application>. Hvis du har eksisterende tredjepartsmoduler
        installert, sørg for at de kompileres på nytt med den oppdaterte versjonen av
        <application>GCC</application>. Som alltid, aldri oppdater kjernens
        deklarasjoner fra de som brukes når <application>Glibc</application> var
        kompilert under LFS.
      </para>
    </caution>

    <bridgehead renderas="sect3">Pakkeinformasjon</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nedlasting (HTTP): <ulink url="&gcc-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting (FTP): <ulink url="&gcc-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting MD5 sum: &gcc-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlastingsstørrelse: &gcc-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert diskplass som kreves: &gcc-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert byggetid: &gcc-time;
        </para>
      </listitem>
    </itemizedlist>
<!--
    <bridgehead renderas="sect3">Ytterligere Nedlastinger</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
		  Valgfri oppdatering når du legger til Go til ønsket språkliste:
          <ulink url="&patch-root;/gcc-&gcc-version;-fix_go_version-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>
-->
    <bridgehead renderas="sect3">GCC Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Valgfri</bridgehead>
    <para role="optional">
      <xref linkend="gdb"/>,
      <xref linkend="valgrind"/> (for tester), og
      <ulink url="https://repo.or.cz/isl.git">ISL</ulink> (for å aktivere grafittoptimalisering)
    </para>

    <para condition="html" role="usernotes">
      Redaktørens notater: <ulink url="&blfs-wiki;/gcc"/>
    </para>

  </sect2>

  <sect2 role="installation">
    <title>Installasjon av GCC</title>

    <important>
      <para>
        Selv om du bare spesifiserer andre språk enn C og C++ til
        <command>./configure</command> kommandoen nedenfor, vil
        installasjonsprosessen overskrive din eksisterende
        <application>GCC</application> C og C++ kompilatorer og biblioteker.
        Det anbefales å kjøre hele pakken med tester.
      </para>

      <para>
        Ikke fortsett med <command>make install</command> kommandoen
        til du er sikker på at byggingen var vellykket. Du kan sammenligne dine
        testresultater med de funnet på <ulink
        url="https://gcc.gnu.org/ml/gcc-testresults/"/>. Du vil kanskje også
        se informasjonen som finnes i <application>GCC</application>
        del av kapittel 8 i LFS boken (<ulink
        url="&lfs-root;/chapter08/gcc.html"/>).
      </para>
    </important>

    <para>
      Instruksjonene nedenfor utfører med vilje en
      <quote>bootstrap</quote> prosess. Bootstrapping er nødvendig for robusthet
      og anbefales sterkt når du oppgraderer kompilatorversjonen. For å deaktivere
      bootstrap uansett, legg til <parameter>--disable-bootstrap</parameter> til
      <command>./configure</command> alternativene nedenfor.
    </para>

    <para>
      Installer <application>GCC</application> ved å kjøre følgende kommandoer:
    </para>

<screen><userinput>case $(uname -m) in
  x86_64)
    sed -i.orig '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64
  ;;
esac

mkdir build               &amp;&amp;
cd    build               &amp;&amp;

../configure              \
    --prefix=/usr         \
    --disable-multilib    \
    --with-system-zlib    \
    --enable-default-pie  \
    --enable-default-ssp  \
    --disable-fixincludes \
    --enable-languages=c,c++,fortran,go,objc,obj-c++,m2 &amp;&amp;
make</userinput></screen>

    <para>
      Hvis du har installert tilleggspakker som f.eks
      <application>Valgrind</application> og <application>gdb</application>,
      <application>gcc</application> delen av testpakken vil kjøre mer
      tester enn i LFS. Noen av disse vil rapportere FAIL og andre XPASS
      (bestått når det forventes å FEILE). Fra og med gcc-13.2.0 oppstår omtrent 65 FAIL
      i <quote>guality</quote> pakken, samt diverse feil
      gjennom resten av testpakken.
      Hvis alle kompilatorene ovenfor er bygget, vil det være litt over 80
      uventede feil av over 546 000 tester. For å kjøre testene, utsted:
     </para>
    </para>

<screen><userinput>ulimit -s 32768 &amp;&amp;
make -k check</userinput></screen>
<!-- The command above may error out, so using && may prevent the summary
to be run. -->

    <para>
      Testene er veldig lange, og resultatene kan være vanskelige å finne i
      logger, spesielt hvis du bruker parallelle jobber med make. Du kan få et sammendrag
      av testene med:
    </para>

<screen><userinput>../contrib/test_summary</userinput></screen>

    <para>
      Nå, som <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>make install &amp;&amp;

mkdir -pv /usr/share/gdb/auto-load/usr/lib              &amp;&amp;
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib &amp;&amp;

chown -v -R root:root \
    /usr/lib/gcc/*linux-gnu/&gcc-version;/include{,-fixed}</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Parameterforklaringer</title>

    <para>
      <command>mkdir build; cd build</command>: 
      <application>GCC</application> dokumentasjon anbefaler
      å bygge pakken i en dedikert byggemappe.
    </para>

    <para>
      <parameter>--disable-multilib</parameter>: Denne parameteren sikrer
      at filer opprettes for den spesifikke arkitekturen til datamaskinen din.
    </para>

    <para>
      <parameter>--with-system-zlib</parameter>: Bruker systemets
      <application>zlib</application> i stedet for den medfølgende.
      <application>zlib</application> brukes til komprimering
      og dekomprimering av <application>GCC</application> sin mellomliggende
      språk i LTO (Link Time Optimization) objektfiler.
    </para>

    <para>
      <parameter>--enable-default-pie</parameter>: Gjør
      <option>-fpie</option> alternativet standard når du kompilerer programmer.
      Sammen med <xref linkend="gASLR"/> funksjonen aktivert i kjernen,
      beseirer dette en del angrep basert på kjente minneoppsett.
    </para>

    <para>
      <parameter>--enable-default-ssp</parameter>: Gjør
      <option>-fstack-protector-strong</option> alternativet standard når du
      kompilerer programmer. <xref linkend="gSSP"/> er en teknikk som hindrer
      endring av programflyten ved å ødelegge parameterstabelen.
    </para>

    <para>
      <parameter>--enable-languages=c,c++,fortran,go,objc,obj-c++,m2</parameter>:
      denne kommandoen for å fjerne uønskede språk. GCC støtter også Ada
      og D, men å bygge GCC med Ada (eller D) støtte trenger en eksisterende
      Ada (eller D) kompilator. Så de er ikke aktivert her.
    </para>

    <para>
      <command>ulimit -s 32768</command>: Denne kommandoen forhindrer flere
      tester fra å gå tom for stabelplass.
    </para>

    <para>
      <command>make -k check</command>: Denne kommandoen kjører testpakken
      uten å stoppe hvis det oppstår feil.
    </para>

    <para>
      <command>../contrib/test_summary</command>: Denne kommandoen vil produsere
      et sammendrag av resultatene fra testserien. Du kan legge til <command>| grep
      -A7 Summ</command> til kommandoen for å produsere en enda mer kondensert
      versjon av sammendraget. Du kan også ønske å omdirigere utdataene
      til en fil for gjennomgang og sammenligning senere.
    </para>

    <para>
      <option>--enable-host-shared --enable-languages=jit</option>:
      Bygg <systemitem class="library">libgccjit</systemitem>, et bibliotek
      for å bygge inn GCC i programmer og biblioteker for å generere maskin
      kode. På tross av <quote>JIT</quote> (just-in-time) i navnet,
      biblioteket kan også brukes til AOT (ahead-of-time) kompilering.
      <option>--enable-host-shared</option> er nødvendig for å bygge
      <systemitem class="library">libgccjit</systemitem>, men det
      reduserer GCC betydelig. Så
      <systemitem class="library">libgccjit</systemitem> bør bli bygget og
      installert separat, ikke som en del av <quote>main</quote> GCC
      installasjon. Hvis du trenger dette biblioteket, konfigurer GCC med
      disse to alternativene og installer biblioteket ved å kjøre
      <!-- from Arch, not tested -->
      <command>make -C gcc jit.install-common jit.install-info</command>
      som &root; bruker.  Dette biblioteket brukes ikke av noen BLFS pakker,
      og er ikke testet av BLFS utviklerne.
    </para>

    <para>
      <command>mv -v /usr/lib/*gdb.py ...</command>: Installasjonensteg
      setter noen filer som brukes av <application>gdb</application> under
      <filename class="directory">/usr/lib</filename> mappen. Dette genererer
      falske feilmeldinger når du utfører <command>ldconfig</command>. Dette
      kommandoen flytter filene til et annet sted.
    </para>

    <para>
      <command>chown -v -R root:root /usr/lib/gcc/*linux-gnu/...</command>:
      Hvis pakken er bygget av en annen bruker enn root, vil eierskapet til
      installerte <filename class="directory">include</filename> mappen (og
      innholdet) vil være feil. Denne kommandoen endrer eierskapet til
      <systemitem class="username">root</systemitem> bruker og gruppe.
    </para>

  </sect2>

  <sect2 role="content">
    <title>Innhold</title>

    <para>
      Noen program- og biblioteknavn og beskrivelser er ikke oppført her,
      men du finner dem på
      <ulink url="&lfs-root;/chapter08/gcc.html#contents-gcc">LFS seksjonen
      for GCC</ulink> siden de
      opprinnelig var installert under byggingen av LFS.
    </para>

    <segmentedlist>
      <segtitle>Installerte Programmer</segtitle>
      <segtitle>Installerte Biblioteker</segtitle>
      <segtitle>Installerte Mapper</segtitle>

      <seglistitem>
        <seg>
          gccgo, gfortran, gm2, go, og gofmt, hardlenket til arkitektur
          spesifikke navn
        </seg>
        <seg>
          libgfortran.{so,a}, libgm2.{so,a}
          libgo.{so,a}, libgobegin.a, libgolibbegin.a,
          libobjc.{so,a}, og en rekke andre kjøretidsbiblioteker og kjørbare filer
        </seg>
        <seg>
          /usr/lib/go
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Korte Beskrivelser</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="gccgo">
        <term><command>gccgo</command></term>
        <listitem>
          <para>
            er en GCC basert kompilator for <application>Go</application>
            språket
          </para>
          <indexterm zone="gcc gccgo">
            <primary sortas="b-gccgo">gccgo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gm2">
        <term><command>gm2</command></term>
        <listitem>
          <para>
            er en GCC basert kompilator for
            <application>Modula-2</application> språket
          </para>
          <indexterm zone="gcc gm2">
            <primary sortas="b-gm2">gm2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="go">
        <term><command>go</command></term>
        <listitem>
          <para>
            er et verktøy for å administrere <application>Go</application> kildekode
          </para>
          <indexterm zone="gcc go">
            <primary sortas="b-go">go</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gofmt">
        <term><command>gofmt</command></term>
        <listitem>
          <para>
            er et verktøy for formatering av <application>Go</application> kildekode
          </para>
          <indexterm zone="gcc gofmt">
            <primary sortas="b-gofmt">gofmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      <!--
      <varlistentry id="gdc">
        <term><command>gdc</command></term>
        <listitem>
          <para>
            er en GCC basert kompilator for <application>D</application>
            språket
          </para>
          <indexterm zone="gcc gdc">
            <primary sortas="b-gdc">gdc</primary>
          </indexterm>
        </listitem>
      </varlistentry>
      -->
      <varlistentry id="gfortran">
        <term><command>gfortran</command></term>
        <listitem>
          <para>
            er en GCC basert kompilator for <application>Fortran</application>
            språket
          </para>
          <indexterm zone="gcc gfortran">
            <primary sortas="b-gfortran">gfortran</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
