<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY rust-download-http "https://static.rust-lang.org/dist/rustc-&rust-version;-src.tar.xz">
  <!ENTITY rust-download-ftp  " ">
  <!ENTITY rust-md5sum        "e5e47e53c52574ce89ea200e52819f81">
  <!ENTITY rust-size          "136 MB">
  <!ENTITY rust-buildsize     "8.5 GB (501 MB installert); legg til 7,5 GB hvis du kjører testene">
  <!ENTITY rust-time          "13 SBU (inkludert nedlastingstid; legg til 16 SBU for tester, begge med parallellisme=4)">
]>

<sect1 id="rust" xreflabel="rustc-&rust-version;">
  <?dbhtml filename="rust.html"?>


  <title>Rustc-&rust-version;</title>

  <indexterm zone="rust">
    <primary sortas="a-rust">Rust</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduksjon til Rust</title>
    <para>
      <application>Rust</application> programmeringsspråket er utformet
      å være et trygt, samtidig, praktisk språk.
    </para>

    <para>
      Denne pakken oppdateres i en seksukers utgivelsessyklus. Fordi den er
      en så stor og treg pakke å bygge, er det for øyeblikket bare nødvendig
      med noen få pakker i denne boken, og spesielt fordi nyere versjoner
      har en tendens til å bryte eldre mozilla pakker, mener BLFS redaktørene at
      den skal bare oppdateres når det er nødvendig (enten for å fikse problemer,
      eller for å la en ny versjon av en pakke bygges).
    </para>

    <para>
      Som med mange andre programmeringsspråk, rustc (rustkompilatoren)
      trenger en binær for å bootstrap fra. Den vil laste ned en stage0
      binær ved starten av bygningen, så du kan ikke kompilere den uten en
      internetttilkobling.
    </para>

    <note>
      <para>
        Selv om BLFS vanligvis installeres i <filename
        class="directory">/usr</filename>, når du senere oppgraderer til en nyere
        versjon av <application>rust</application> de gamle bibliotekene i <filename
        class="directory">/usr/lib/rustlib</filename> vil forbli, med div
        hasher i navnene deres, men vil ikke være brukbare og vil kaste bort plass.
        Redaktører anbefaler å plassere filene i <filename
        class="directory">/opt</filename> mappen.  Spesielt hvis du
        har grunn til å gjenoppbygge med en modifisert konfigurasjon (f.eks. ved å bruke
        sendt LLVM etter å ha bygget med delt LLVM, kanskje for å kompilere crates
        for arkitekturer som BLFS LLVM bygget ikke støtter)
        det er mulig for installasjonen å etterlate et ødelagt
        <command>cargo</command> program. I en slik situasjon, fjern enten
        den eksisterende installasjonen først, eller bruk et annet prefiks som f.eks
        /opt/rustc-&rust-version;-build2.
      </para>

      <para>
        Hvis du foretrekker det, kan du selvfølgelig endre prefikset til <filename
        class="directory">/usr</filename>.
      </para>
    </note>

    <para>
      Det nåværende <application>rustbuild</application> byggesystemet vil bruke
      alle prosessorer, selv om den ikke skalerer godt og ofte faller
      tilbake til bare å bruke én kjerne mens du venter på at et bibliotek skal kompileres.
      Imidlertid kan det stort sett begrenses til et spesifisert antall prosessorer av
      en kombinasjon av å legge til bryteren <literal>--jobs &lt;N&gt;</literal>
      (f.eks. '--jobs 4' å begrense til 4 prosessorer) på hver påkallelse av
      <command>python3 ./x.py</command> <emphasis>og</emphasis> ved hjelp av en
      miljøvariabel <envar>CARGO_BUILD_JOBS=&lt;N&gt;</envar>. For
      øyeblikket er dette ikke effektivt når noen av rustc testene kjøres.
    </para>

    <para>
      Den nåværende versjonen av rusts num_cpus crate gjenkjenner nå at cgroups
      kan brukes til å begrense hvilke prosessorer det er tillatt å bruke. Så hvis din
      maskinen mangler DRAM (vanligvis mindre enn 2 GB DRAM per kjerne) som kan være
      et alternativ til å ta CPUer offline.
      <phrase revision="sysv">I sysv systemer krever cgroups <ulink
      url="https://sourceforge.net/projects/libcg/">libcgroup</ulink>.</phrase>
      <phrase revision="systemd">Det kan oppnås ved å bruke
      <command>systemd-run</command> kommandoen med
      <parameter>-p User=$(whoami)</parameter> og
      <parameter>-p AllowedCPUs=0-<replaceable>x</replaceable></parameter>
      (med <replaceable>x</replaceable> erstattet med antall CPU
      kjerner du vil bruke minus én) alternativer.</phrase>
    </para>

    <para>
      For øyeblikket <application>Rust</application> gir ikke noen
      garantier for en stabil ABI.
    </para>

    <note>
      <para>
        Rustc bygger som standard for ALLE støttede arkitekturer, ved å bruke en
        sendt kopi av LLVM. I BLFS er bygget bare for X86
        arkitektur.
        Hvis du har tenkt å utvikle rust crates, kan det hende at denne konstruksjonen ikke er bra
        nok til dine formål.
      </para>
      <para>
        Byggetidene for denne versjonen når den gjentas på samme maskin er
        ofte rimelig konsekvent, men som med alle samlinger som bruker
        <command>rustc</command> det kan være noen veldig langsomme uteliggere.
      </para>
    </note>

    &lfs113_checked;

    <bridgehead renderas="sect3">Pakkeinformasjon</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nedlasting (HTTP): <ulink url="&rust-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting (FTP): <ulink url="&rust-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting MD5 sum: &rust-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlastingsstørrelse: &rust-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert diskplass som kreves: &rust-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert byggetid: &rust-time;
        </para>
      </listitem>
    </itemizedlist>

<!--<bridgehead renderas="sect3">Ytterligere Nedlastinger</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nødvendig oppdatering:
          <ulink url="&patch-root;/rustc-&rust-version;-llvm9_fixes-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>-->

    <bridgehead renderas="sect3">Rust Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Påkrevd</bridgehead>
    <para role="required">
      <xref linkend="cmake"/>
    </para>

    <bridgehead renderas="sect4">Anbefalt</bridgehead>
    <para role="recommended">
      <xref linkend="curl"/>,
      <xref linkend="libssh2"/>, og
      <xref linkend="llvm"/>
      (bygget med -DLLVM_LINK_LLVM_DYLIB=ON slik at rust kan lenke til
      system LLVM i stedet for å bygge den sendte versjonen)
    </para>

    <note>
      <para>
        Hvis en anbefalt avhengighet ikke er installert, sendes en kopi i
        Rustc kilde tarballen vil bli bygget og brukes.
      </para>
    </note>

    <bridgehead renderas="sect4">Valgfri</bridgehead>
    <para role="optional">
      <xref linkend="gdb"/> (brukes av testpakken hvis den er til stede) og
      <ulink url='https://libgit2.org/'>libgit2</ulink>
    </para>

    <para condition="html" role="usernotes">
      Brukernotater: <ulink url="&blfs-wiki;/rust"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installasjon av Rust</title>

    <note>
      <para>
        For tiden produserer Rust kompilatoren SSE2 instruksjoner for 32-bit x86,
        som forårsaker at den genererte koden blir ødelagt på 32-bits systemer uten en
        SSE2-kompatibel prosessor. Alle x86-prosessormodeller utgitt etter
        2004 skal være SSE2-kompatibel. Kjør
        <command>lscpu | grep sse2</command> som en test. Hvis det gir ut
        noe, er CPU-en din SSE2-kompatibel og OK. Ellers kan du prøve
        å bygge denne pakken <emphasis>på et SSE2-kompatibelt system</emphasis>
        med følgende rettelse brukt:
      </para>

      <!-- computeroutput used deliberately to stop anyone from copying
           blindly -->
<screen role="nodump"><computeroutput>sed 's@pentium4@pentiumpro@' -i \
    compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs</computeroutput></screen>

      <para>
        Og kopier resultatet
        <filename class="directory">/opt/rustc-&rust-version;</filename>
        til systemet uten SSE2-kapasitet. Men denne endringen er fortsatt
        under oppstrøms gjennomgang og ikke testet av BLFS redaktører.
      </para>
    </note>

    <para>
      For å installere i
      <filename class="directory">/opt</filename> mappen, fjern eventuelle
      eksisterende <filename>/opt/rustc</filename> symbolkobling
      og opprett en ny mappe (dvs. med et annet navn hvis du prøver en
      modifisert versjon av samme versjon).
      Som <systemitem class="username">root</systemitem>
      bruker:
    </para>

<screen role="root"><userinput>mkdir -pv /opt/rustc-&rust-version;      &amp;&amp;
ln -svfn rustc-&rust-version; /opt/rustc</userinput></screen>

    <note>
      <para>
        Hvis flere versjoner av <application>Rust</application> er installert
        i <filename class="directory">/opt</filename>, skifte til en annen
        versjonen krever bare å endre <filename> /opt/rustc</filename>
        symbolsk lenke og deretter kjøre <command>ldconfig</command>.
      </para>
    </note>

    <para>
      Lag en passende <filename>config.toml</filename> fil som vil
      konfigurere bygget.
    </para>

<screen><userinput>cat &lt;&lt; EOF &gt; config.toml
<literal># see config.toml.example for more possible options
# See the 8.4 book for an old example using shipped LLVM
# e.g. if not installing clang, or using a version before 13.0

# tell x.py to not keep printing an annoying warning
changelog-seen = 2

[llvm]
# by default, rust will build for a myriad of architectures
targets = "X86"

# When using system llvm prefer shared libraries
link-shared = true

[build]
# omit docs to save time and space (default is to build them)
docs = false

# install extended tools: cargo, clippy, etc
extended = true

# Do not query new versions of dependencies online.
locked-deps = true

# Specify which extended tools (those from the default install).
tools = ["cargo", "clippy", "rustfmt"]

# Use the source code shipped in the tarball for the dependencies.
# The combination of this and the "locked-deps" entry avoids downloading
# many crates from Internet, and makes the Rustc build more stable.
vendor = true

[install]
prefix = "/opt/rustc-&rust-version;"
docdir = "share/doc/rustc-&rust-version;"

[rust]
channel = "stable"
description = "for BLFS &version;"

# BLFS used to not install the FileCheck executable from llvm,
# so disabled codegen tests.  The assembly tests rely on FileCheck
# and cannot easily be disabled, so those will anyway fail if
# FileCheck has not been installed.
#codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

</literal>
EOF</userinput></screen>

<!--<para>
     Tilpass rustc for å la den bygge og fungere med endringene i LLVM-9:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../rustc-&rust-version;-llvm9_fixes-1.patch</userinput></screen>-->

    <para>
      Kompilere <application>Rust</application> ved å kjøre følgende
      kommandoer:
    </para>

<!-- fixed in 1.58.0, retain as a reminder that fixed crates can be used
<screen><userinput>sed -i -e '/^curl /s/0.4.38/0.4.40/' \
       -e '/^curl-sys /s/0.4.48/0.4.50/' \
       src/tools/cargo/Cargo.toml &amp;&amp; -->

<screen><userinput>{ [ ! -e /usr/include/libssh2.h ] ||
  export LIBSSH2_SYS_USE_PKG_CONFIG=1; } &amp;&amp;
python3 ./x.py build</userinput></screen>

    <note>
      <para>
        Testpakken vil generere noen meldinger i
        <phrase revision="sysv">system log</phrase>
        <phrase revision="systemd">systemd journal</phrase>
        for feller på ugyldige opkoder, og for segmenteringsfeil.
        I seg selv er disse ingenting å bekymre seg for, bare en måte for
        at en test skal avsluttes.
      </para>
    </note>

    <para>
      Å kjøre testene (igjen ved å bruke alle tilgjengelige CPUer) kjør:
    </para>

<screen remap="test"><userinput>python3 ./x.py test --verbose --no-fail-fast | tee rustc-testlog</userinput></screen>

    <para>
      Hvis <command>FileCheck</command> fra <application>LLVM</application> ikke
      er installert, alle 47 tester fra <quote>assembly</quote> pakken
      vil mislykkes.
    </para>

    <para>
      Som med alle store testserier, kan andre tester mislykkes på noen maskiner -
      hvis antall ekstra feil er enkeltsifrede,
      sjekk loggen for "feil:" og se gjennom linjene over det, spesielt
      'stderr:' linjer. Enhver omtale av
      SIGSEGV eller signal 11 i en sviktende test er en grunn til bekymring.
    </para>

    <para>
      Hvis du får <emphasis>andre</emphasis> testfeil som rapporterer et
      utgavenummer, så bør du søke etter det problemet. For eksempel når
      rustc &gt;= 1.41.1 ble bygget med en versjon av sysllvm før 10.0 testen
      for utgave 69225 mislyktes <ulink
      url="https://github.com/rust-lang/rust/issues/69225"/> og det burde bli
      betraktet som en kritisk feil (de ga ut 1.41.1 på grunn av det).
      De fleste andre feil vil ikke være kritiske.
    </para>

    <para>
      Derfor bør du bestemme antall feil.
    </para>

    <para>
      Antall tester som har bestått og ikke bestått finner du ved å kjøre:
    </para>

<!-- split into two lines for narrower screen windows -->
<screen remap="test"><userinput>grep '^test result:' rustc-testlog |
 awk '{sum1 += $4; sum2 += $6} END { print sum1 " passed; " sum2 " failed" }'</userinput></screen>

    <para>
      De andre tilgjengelige feltene er $8 for de som ble ignorert
      (dvs. hoppet over), $10 for "målt" og $12 for "filtrert ut", men begge
      de to siste er sannsynligvis null.
    </para>

    <para>
      Nå, som &root; bruker, installer pakken:
    </para>

    <note>
      <para>
        Hvis <command>sudo</command> eller <command>su</command> er påberopt for
        å bytte til &root; bruker, forsikre at
        <envar>LIBSSH2_SYS_USE_PKG_CONFIG</envar> er korrekt passert ellers
        vil følgende kommando gjenoppbygge denne pakken fullstendig. For
        <command>sudo</command>, bruk
        <option>--preserve-env=LIBSSH2_SYS_USE_PKG_CONFIG</option> valget.
        For <command>su</command>, <emphasis>ikke</emphasis> bruk
        <option>-</option> eller <option>--login</option>.
      </para>
    </note>

<screen role='root'><userinput>python3 ./x.py install</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Parameterforklaringer</title>			

    <para>
      <command>ln -svfn rustc-&rust-version; /opt/rustc</command>: hvis dette
      ikke er den første bruken av <filename class="directory">/opt/rustc</filename>
      symbollenke, overskriv den ved å tvinge, og bruk '-n'-flagget for å unngå å få
      forvirrende resultater fra f.eks. <command>ls -l</command>.
    </para>

    <para>
      <command>targets = "X86"</command>: dette unngår å bygge alle tilgjengelige
      linux krysskompilatorer (AArch64, MIPS, PowerPC, SystemZ, etc). Dessverre,
      rust insisterer på å installere kildefiler for disse under
      <filename class="directory">/opt/rustc/lib/src</filename>.
    </para>

    <para>
      <command>extended = true</command>: dette installerer flere verktøy
      (spesifisert av <literal>tools</literal>oppføringen) ved siden av
      <command>rustc</command>.
    </para>

    <para>
      <command>tools = ["cargo", "clippy", "rustfmt"]</command>: hvis verktøyene
      ikke er spesifisert, fraværet av <application>Miri</application> fører
      nå til at installasjonen mislykkes. Men <application>Miri</application> er ikke
      bygget i den stabile kanalen. Noen av de andre verktøyene er usannsynlig
      å være nyttig med mindre du bruker (gamle) kodeanalysatorer eller redigerer standardbiblioteket.
      Dette settet samsvarer med de fra 'standard' profilen i binær kommando
      <command>rustup</command> som anbefales for de fleste brukere, bortsett fra at
      dokumentasjonen ble deaktivert ved starten av delen "[build]".
    </para>

    <para>
      <command>channel = "stable"</command>: dette sikrer at kun stabile funksjoner
      kan brukes, standard i <filename>config.toml</filename> er å bruke
      utviklingsfunksjoner, som ikke passer for en utgitt versjon.
    </para>

    <!-- comment while using shipped LLVM -->
    <para>
      <command>[target.x86_64-unknown-linux-gnu]</command>: syntaksen til
      <filename>config.toml</filename> krever en <literal>llvm-config</literal>
      oppføring for hvert mål som system-llvm skal brukes for. Endre målet
      til <literal>[target.i686-unknown-linux-gnu]</literal> hvis du bygger
      på 32-bit x86. Hele denne delen kan utelates hvis du ønsker å bygge
      mot den sendte llvm, eller ikke har clang, men det resulterende bygget vil
      være større og ta lengre tid.
    </para>

<!--<para>
      <command>sed -i -e '/^curl /s/0.4.38/0.4.40/' ... </command>: to crates
      som normalt lastes ned for denne utgivelsen, initialiseres ikke
      <application>curl</application> riktig hvis du bruker
      <application>openssl-3.0.0</application>. Oppstrøms har fikset det for en
      fremtidig utgivelse, denne sed gjør at de denne versjonene brukes.
    </para>-->

    <!-- https://github.com/alexcrichton/ssh2-rs/issues/173 -->
    <para>
      <command>export LIBSSH2_SYS_USE_PKG_CONFIG=1</command>: Tillater
      <command>cargo</command> å koble til systemets libssh2.
    </para>

<!--<para>
      <command>export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"</command>:
      Dette legger til en lenke til libffi til eventuelle RUSTFLAGS du allerede passerer
      til bygget. På noen systemer unnlater kobling å inkludere libffi med mindre
      dette brukes. Årsaken til at dette er nødvendig er ikke klarlagt.
      14.01.2023 : antas ikke lenger å være nødvendig, men det er noen år
      siden en person rapporterte å trenge dette, behold det kommentert for øyeblikket.
    </para>-->

    <para>
      <command>--verbose</command>: denne bryteren kan noen ganger gi mer
      informasjon om en test som mislykkes.
    </para>

    <para>
      <command>--no-fail-fast</command>: denne bryteren sikrer at testpakken
      ikke vil stoppe ved den første feilen.
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Konfigurere Rust</title>

    <sect3 id="rustc-config">
      <title>Konfigurasjonsinformasjon</title>

      <para>
        Hvis du har installert <application>rustc</application> i
        <filename class="directory">/opt</filename>, må du oppdatere
        følgende konfigurasjonsfiler slik at <application>rustc</application>
        er riktig funnet av andre pakker og systemprosesser.
      </para>

      <para>
        Som <systemitem class="username">root</systemitem> bruker, opprett
        <filename>/etc/profile.d/rustc.sh</filename> filen:
      </para>

<screen role="root"><userinput>cat &gt; /etc/profile.d/rustc.sh &lt;&lt; "EOF"
<literal># Begin /etc/profile.d/rustc.sh

pathprepend /opt/rustc/bin           PATH

# Include /opt/rustc/man in the MANPATH variable to access manual pages
pathappend  /opt/rustc/share/man     MANPATH

# End /etc/profile.d/rustc.sh</literal>
EOF</userinput></screen>

      <para>
        Oppdater gjeldende PATH umiddelbart etter installasjonen
        for ditt nåværende skall som en vanlig bruker:
      </para>

<screen><userinput>source /etc/profile.d/rustc.sh</userinput></screen>

    </sect3>
  </sect2>


  <sect2 role="content">
    <title>Innhold</title>

    <segmentedlist>
      <segtitle>Installerte Programmer</segtitle>
      <segtitle>Installerte Biblioteker</segtitle>
      <segtitle>Installerte Mapper</segtitle>

      <seglistitem>			
        <seg>
          cargo-clippy, cargo-fmt, cargo, clippy-driver, rust-gdb,
          rust-gdbgui, rust-lldb, rustc, rustdoc, og rustfmt
        </seg>
        <seg>
          librustc-driver-&lt;16-byte-hash&gt;.so,
          libstd-&lt;16-byte-hash&gt;.so, og
          libtest-&lt;16-byte-hash&gt;.so
        </seg>
        <seg>
          ~/.cargo,
          /opt/rustc, symbolsk lenke til
          /opt/rustc-&rust-version;
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Korte Beskrivelser</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="cargo-clippy">
        <term><command>cargo-clippy</command></term>
        <listitem>
          <para>
            gir lint sjekker for en cargo pakke
          </para>
          <indexterm zone="rust cargo-clippy">
            <primary sortas="b-cargo-clippy">cargo-clippy</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cargo-fmt">
        <term><command>cargo-fmt</command></term>
        <listitem>
          <para>
            formaterer alle bin og lib filer i gjeldende crate ved hjelp av
            rustfmt
          </para>
          <indexterm zone="rust cargo-fmt">
            <primary sortas="b-cargo-fmt">cargo-fmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

<!--  <varlistentry id="cargo-miri">
        <term><command>cargo-miri</command></term>
        <listitem>
          <para>
            er til bruk av Miri til å tolke bin crates og tester. Det er
            ikke installert som standard.
          </para>
          <indexterm zone="rust cargo-miri">
            <primary sortas="b-cargo-miri">cargo-miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->

      <varlistentry id="cargo">
        <term><command>cargo</command></term>
        <listitem>
          <para>
            er Pakkebehandler for Rust
          </para>
          <indexterm zone="rust cargo">
            <primary sortas="b-cargo">cargo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clippy-driver">
        <term><command>clippy-driver</command></term>
        <listitem>
          <para>
            gir lint sjekker for Rust
          </para>
          <indexterm zone="rust clippy-driver">
            <primary sortas="b-clippy-driver">clippy-driver</primary>
          </indexterm>
        </listitem>
      </varlistentry>

<!--  <varlistentry id="miri">
        <term><command>miri</command></term>
        <listitem>
          <para>
            er tolk for Rusts mellomrepresentasjon på mellomnivå
            (MIR). Den er ikke installert som standard.
          </para>
          <indexterm zone="rust miri">
            <primary sortas="b-miri">miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rls">
        <term><command>rls</command></term>
        <listitem>
          <para>
            er Rust Language Server. Dette kan kjøre i bakgrunnen til
            gi IDE-er, redaktører og andre verktøy informasjon om Rust
            programmer
          </para>
          <indexterm zone="rust rls">
            <primary sortas="b-rls">rls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-analyzer">
        <term><command>rust-analyzer</command></term>
        <listitem>
          <para>
            er en implementering av Language Server Protocol for the Rust
            programmeringsspråk.
          </para>
          <indexterm zone="rust rust-analyzer">
            <primary sortas="b-rust-analyzer">rust-analyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-demangler">
        <term><command>rust-demangler</command></term>
        <listitem>
          <para>
            konverterer en liste over mangled rust symboler til en
            tilsvarende liste over demangled symboler
          </para>
          <indexterm zone="rust rust-demangler">
            <primary sortas="b-rust-demangler">rust-demangler</primary>
          </indexterm>
        </listitem>
      </varlistentry> -->

      <varlistentry id="rust-gdb">
        <term><command>rust-gdb</command></term>
        <listitem>
          <para>
            er et innpakningsskript for gdb, som trekker inn Python pretty-printing
            moduler installert i
            <filename class="directory">/opt/rustc-&rust-version;/lib/rustlib/etc</filename>
          </para>
          <indexterm zone="rust rust-gdb">
            <primary sortas="b-rust-gdb">rust-gdb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-gdbgui">
        <term><command>rust-gdbgui</command></term>
        <listitem>
          <para>
            er et innpakningsskript for et grafisk grensesnitt til gdb som kjører i en
            nettleser
          </para>
          <indexterm zone="rust rust-gdbgui">
            <primary sortas="b-rust-gdbgui">rust-gdbgui</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-lldb">
        <term><command>rust-lldb</command></term>
        <listitem>
          <para>
            er et innpakningsskript for LLDB (LLVM feilsøkeren)
            som trekker inn Python pretty-printing modulene
          </para>
          <indexterm zone="rust rust-lldb">
            <primary sortas="b-rust-lldb">rust=lldb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustc">
        <term><command>rustc</command></term>
        <listitem>
          <para>
            er rust kompilatoren
          </para>
          <indexterm zone="rust rustc">
            <primary sortas="b-rustc">rustc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustdoc">
        <term><command>rustdoc</command></term>
        <listitem>
          <para>
            genererer dokumentasjon fra rust kildekode
          </para>
          <indexterm zone="rust rustdoc">
            <primary sortas="b-rustdoc">rustdoc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustfmt">
        <term><command>rustfmt</command></term>
        <listitem>
          <para>
            formaterer rust kode
          </para>
          <indexterm zone="rust rustfmt">
            <primary sortas="b-rustfmt">rustfmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstd">
        <term><filename class="libraryfile">libstd-&lt;16-byte-hash&gt;.so</filename></term>
        <listitem>
          <para>
            er Rust Standardbibliotek, grunnlaget for flyttbar Rust programvare
          </para>
          <indexterm zone="rust libstd">
            <primary sortas="c-libstd">libstd-&lt;16-byte-hash&gt;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

</sect1>
