<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY rust-download-http "https://static.rust-lang.org/dist/rustc-&rust-version;-src.tar.xz">
  <!ENTITY rust-download-ftp  " ">
  <!ENTITY rust-md5sum        "ffe55dfd0e035e6bfc88060506cddf32">
  <!ENTITY rust-size          "263 MB">
  <!ENTITY rust-buildsize     "9.4 GB (252 MB installert); legg til 7.4 GB hvis du kjører testene">
  <!ENTITY rust-time          "9.0 SBU (inkludert nedlastingstid; legg til 15 SBU for tester, begge med parallellisme=8)">
]>

<sect1 id="rust" xreflabel="rustc-&rust-version;">
  <?dbhtml filename="rust.html"?>


  <title>Rustc-&rust-version;</title>

  <indexterm zone="rust">
    <primary sortas="a-rust">Rust</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduksjon til Rust</title>
    <para>
      <application>Rust</application> programmeringsspråket er utformet
      for å være et trygt, samtidig, praktisk språk.
    </para>

    <para>
      Denne pakken oppdateres i en seksukers utgivelsessyklus. Fordi den er
      en så stor og treg pakke å bygge, er for øyeblikket bare nødvendig
      av noen få pakker i denne boken, og spesielt fordi nyere versjoner
      har en tendens til å bryte eldre mozilla pakker, mener BLFS redaktørene at
      den skal bare oppdateres når det er nødvendig (enten for å fikse problemer,
      eller for å la en ny versjon av en pakke bygges).
    </para>

    <para>
      Som med mange andre programmeringsspråk, rustc (rustkompilatoren)
      trenger en binær for oppstartssekvensen. Den vil laste ned en stage0
      binær ved starten av bygningen, så du kan ikke kompilere den uten en
      Internett tilkobling.
    </para>

    <note>
      <para>
        Selv om BLFS vanligvis installeres i <filename
        class="directory">/usr</filename>, når du senere oppgraderer til en nyere
        versjon av <application>rust</application> de gamle bibliotekene i <filename
        class="directory">/usr/lib/rustlib</filename> vil forbli, med div
        hasher i navnene deres, men vil ikke være brukbare og vil kaste bort plass.
        Redaktører anbefaler å plassere filene i <filename
        class="directory">/opt</filename> mappen.  Spesielt hvis du
        har grunn til å gjenoppbygge med en modifisert konfigurasjon (f.eks. ved å bruke
        sendt LLVM etter å ha bygget med delt LLVM, kanskje for å kompilere crates
        for arkitekturer som BLFS LLVM bygget ikke støtter)
        det er mulig for installasjonen å etterlate et ødelagt
        <command>cargo</command> program. I en slik situasjon, fjern enten
        den eksisterende installasjonen først, eller bruk et annet prefiks som f.eks
        /opt/rustc-&rust-version;-build2.
      </para>

      <para>
        Hvis du foretrekker det, kan du selvfølgelig endre prefikset til <filename
        class="directory">/usr</filename>.
      </para>
    </note>

    <para>
      Det nåværende <application>rustbuild</application> byggesystemet vil bruke
      alle prosessorer, selv om den ikke skalerer godt og ofte faller
      tilbake til bare å bruke én kjerne mens du venter på at et bibliotek skal kompileres.
      Imidlertid kan det stort sett begrenses til et spesifisert antall prosessorer av
      en kombinasjon av å legge til bryteren <literal>--jobs &lt;N&gt;</literal>
      (f.eks. '--jobs 4' for å begrense til 4 prosessorer) på hver påkalling av
      <command>./x.py</command> <emphasis>og</emphasis> ved hjelp av en
      miljøvariabel <envar>CARGO_BUILD_JOBS=&lt;N&gt;</envar>. For
      øyeblikket er dette ikke effektivt når noen av rustc testene kjøres.
    </para>

    <para>
      Den nåværende versjonen av rusts num_cpus crate gjenkjenner nå at cgroups
      kan brukes til å begrense hvilke prosessorer det er tillatt å bruke. Så hvis din
      maskin mangler DRAM (vanligvis mindre enn 2 GB DRAM per kjerne) som kan være
      et alternativ til å ta CPUer offline.
      Les <xref linkend='build-in-cgroup'/> for hvordan du bruker en cgroup.
    </para>

    <para>
      For øyeblikket <application>Rust</application> gir ingen
      garantier for en stabil ABI.
    </para>

    <note>
      <para>
        Rustc bygger som standard for ALLE støttede arkitekturer, ved å bruke en
        sendt kopi av LLVM. I BLFS er bygget bare for X86
        arkitektur.
        Hvis du har tenkt å utvikle rust crates, kan det hende at denne konstruksjonen ikke er bra
        nok til dine formål.
      </para>
      <para>
        Byggetidene for denne versjonen når den gjentas på samme maskin er
        ofte rimelig konsekvent, men som med alle kompilatorer som bruker
        <command>rustc</command> det kan være noen veldig langsomme avvikere.
      </para>
    </note>

    &lfs123_checked;

    <bridgehead renderas="sect3">Pakkeinformasjon</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nedlasting (HTTP): <ulink url="&rust-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting (FTP): <ulink url="&rust-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting MD5 sum: &rust-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlastingsstørrelse: &rust-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert diskplass som kreves: &rust-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert byggetid: &rust-time;
        </para>
      </listitem>
    </itemizedlist>

    <!--  keep this here for reuse in case we need a patch -->
<!--
<bridgehead renderas="sect3">Ytterligere Nedlastinger</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nødvendig oppdatering:
          <ulink url="&patch-root;/rustc-&rust-version;-llvm_20-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>
-->

    <bridgehead renderas="sect3">Rust Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Påkrevd</bridgehead>
    <para role="required">
      <xref linkend="cmake"/> og
      <!-- Required for downloading stage 0 binaries.
           Otherwise it's recommended (if not installed, a vendored copy
           will be built). -->
      <xref linkend="curl"/>
    </para>

    &build-use-internet;

    <bridgehead renderas="sect4">Anbefalt</bridgehead>
    <para role="recommended">
      <xref linkend="libssh2"/>,
      <xref linkend="llvm"/>
      (bygget med -D LLVM_LINK_LLVM_DYLIB=ON slik at rust kan lenke til
      systemets LLVM i stedet for å bygge den sendte versjonen), og
      <xref linkend="sqlite"/>
    </para>

    <note>
      <para>
        Hvis en anbefalt avhengighet ikke er installert, en sendt kopi i
        Rustc kildetarballen blir bygd og brukt.
      </para>
    </note>

    <bridgehead renderas="sect4">Valgfri</bridgehead>
    <para role="optional">
      <xref linkend="gdb"/> (brukes av testpakken hvis den er til stede),
      <xref linkend="git"/> (kreves av testpakken),
      <ulink url="https://github.com/bytecodealliance/wasmtime/tree/main/cranelift">cranelift</ulink>,
      <ulink url="https://jemalloc.net/">jemalloc</ulink>,
      libgccjit (les parameterforklaringer i
      <xref role="nodep" linkend="gcc"/>), og
      <ulink url='https://libgit2.org/'>libgit2</ulink>
    </para>

    <para condition="html" role="usernotes">
      Redaktørens notater: <ulink url="&blfs-wiki;/rust"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installasjon av Rust</title>

    <para>
      For å installere i
      <filename class="directory">/opt</filename> mappen, fjerne evt
      eksisterende <filename>/opt/rustc</filename> symbolkobling
      og opprett en ny mappe (dvs. med et annet navn hvis du prøver en
      modifisert versjon av samme versjon).
      Som <systemitem class="username">root</systemitem>
      bruker:
    </para>

<screen role="root"><userinput>mkdir -pv /opt/rustc-&rust-version;      &amp;&amp;
ln -svfn rustc-&rust-version; /opt/rustc</userinput></screen>

    <note>
      <para>
        Hvis flere versjoner av <application>Rust</application> er installert
        i <filename class="directory">/opt</filename>, endre til en annen
        versjonen krever bare å endre <filename> /opt/rustc</filename>
        symbolsk lenke og deretter kjøre <command>ldconfig</command>.
      </para>
    </note>

    <para>
      Opprett en passende <filename>config.toml</filename> fil som vil
      konfigurere bygget.
    </para>

<screen><userinput>cat &lt;&lt; EOF &gt; config.toml
<literal># See config.toml.example for more possible options,
# and see src/bootstrap/defaults/config.dist.toml for a few options
# automatically set when building from a release tarball
# (unfortunately, we have to override many of them).

# Tell x.py the editors have reviewed the content of this file
# and updated it to follow the major changes of the building system,
# so x.py will not warn us to do such a review.
change-id = 136941

[llvm]
# When using system llvm prefer shared libraries
link-shared = true

# If building the shipped LLVM source, only enable the x86 target
# instead of all the targets supported by LLVM.
targets = "X86"

[build]
# Do a 2-stage bootstrap instead of a 3-stage one to save time and space.
# Note that the numbers "1" below mean to *run* the stage-*1* compiler and
# build the stage-2 compiler.
build-stage = 1
test-stage = 1
doc-stage = 1

# Omit docs to save time and space (default is to build them).
docs = false

# Do not query new versions of dependencies online.
locked-deps = true

# Specify which extended tools (those from the default install).
tools = ["cargo", "clippy", "rustdoc", "rustfmt"]

[install]
prefix = "/opt/rustc-&rust-version;"
docdir = "share/doc/rustc-&rust-version;"

[rust]
channel = "stable"
description = "for BLFS &version;"

# Enable the same optimizations as the official upstream build.
lto = "thin"
codegen-units = 1

# Don't build lld which does not belong to this package and seems not
# so useful for BLFS.  Even if it turns out to be really useful we'd build
# it as a part of the LLVM package instead.
lld = false

# Don't build llvm-bitcode-linker which is only useful for the NVPTX
# backend that we don't enable.
llvm-bitcode-linker = false

[target.x86_64-unknown-linux-gnu]
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
lvm-config = "/usr/bin/llvm-config"</literal>
EOF</userinput></screen>

<!-- It seems gone since 1.81.0 but not confirmed upstream
    <note>
      <para>
        <command>python3 x.py</command> kommandoer kan gi en advarselsmelding
        klagende på <computeroutput>no codegen-backends
        config matched the requested path to build a codegen
        backend</computeroutput>.  Og det gitte
        <quote>forslaget</quote> (<computeroutput>add backend to
        codegen-backends in config.toml</computeroutput>) vil ikke stilne
        det.   Denne advarselen er <ulink
        url='https://github.com/rust-lang/rust/issues/110692'>bogus</ulink>
        og det bør ignoreres.
      </para>
    </note>
-->
<!-- retain here in case we need a patch
    <para>
      Reparer nå byggefeil med LLVM 20:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../rustc-&rust-version;-llvm_20-1.patch</userinput></screen>
-->
    <para>
      Kompiler <application>Rust</application> ved å kjøre følgende
      kommandoer:
    </para>
<!-- fixed in 1.58.0, retain as a reminder that fixed crates can be used
<screen><userinput>sed -i -e '/^curl /s/0.4.38/0.4.40/' \
       -e '/^curl-sys /s/0.4.48/0.4.50/' \
       src/tools/cargo/Cargo.toml &amp;&amp; -->

<screen><userinput>[ ! -e /usr/include/libssh2.h ] || export LIBSSH2_SYS_USE_PKG_CONFIG=1
[ ! -e /usr/include/sqlite3.h ] || export LIBSQLITE3_SYS_USE_PKG_CONFIG=1
./x.py build</userinput></screen>

    <note>
      <para>
        Testpakken vil generere noen meldinger i
        <phrase revision="sysv">system log</phrase>
        <phrase revision="systemd">systemd journal</phrase>
        for feller på ugyldige opkoder, og for segmenteringsfeil.
        I seg selv er disse ingenting å bekymre seg for, bare en måte for
        test å avslutte.
      </para>
    </note>

    <para>
      Å kjøre testene (igjen ved å bruke alle tilgjengelige CPUer) utsted:
    </para>

<screen remap="test"><userinput>./x.py test --verbose --no-fail-fast | tee rustc-testlog</userinput></screen>

    <para>
      Tre tester i bootstrap testpakken er kjent for å mislykkes pga at
      de forventer å kjøre i Rust Git-depotet.
      Testen navngitt <filename>tests/run-make/musl-default-linking</filename>
      er kjent for å mislykkes fordi vi ikke har aktivert AArch64 målet
      <xref linkend='llvm'/>.  Testen navngitt
      <filename>tests/run-make/linker-warning</filename> er kjent for å mislykkes
      av en eller annen grunn som ennå er ukjent.
    </para>

<!-- Let's just comment this out.  Nobody has tested on a system w/o
     FileCheck for a long time.
    <para>
      Hvis <command>FileCheck</command> fra <application>LLVM</application> ikke
      har blitt installert, alle 47 tester fra <quote>assembly</quote> pakken
      vil mislykkes.
    </para>
-->
    <para>
      Som med alle store testserier, kan noen tester mislykkes på noen maskiner -
      hvis antallet ekstra feil er lavt,
      sjekk loggen for "failures:" og se gjennom linjene over det, spesielt
      'stderr:' linjer. Enhver omtale av
      SIGSEGV eller signal 11 i en sviktende test er en grunn til bekymring.
    </para>

    <note>
      <para>
        Hvis du har strippet
        <filename class='libraryfile'>/usr/lib/libc.a</filename> med
        <command>strip --strip-unneeded</command>, alt statiske koblete
        Rustprogrammer vil krasje med SIGSEGV ved oppstart, noe som forårsaker flere
        tester (for eksempel
        <filename>tests/ui/process/nofile-limit.rs</filename>) å mislykkes med
        SIGSEGV.
      </para>
      <para>
        Vi undersøker fortsatt for årsaken til dette problemet, men
        for nå har vi byttet ut <parameter>--strip-unneeded</parameter> med
        <parameter>--strip-debug</parameter> i både LFS boka og
        <xref linkend='stripping'/> å omgå det. Hvis du opplever dette
        problemet, gjenoppbygg Glibc og erstatt
        <filename class='libraryfile'>/usr/lib/libc.a</filename> filen
        med den ustrippede <filename class='libraryfile'>libc.a</filename>
        fra nybygget.
      </para>
    </note>

    <para>
      Hvis du får noen <emphasis>andre</emphasis> sviktende tester som rapporterer et
      utgavenummer, så bør du søke etter det problemet. For eksempel når
      rustc &gt;= 1.41.1 ble bygget med en versjon av sysllvm før 10.0 testen
      for problem 69225 mislyktes <ulink
      url="https://github.com/rust-lang/rust/issues/69225"/> og det burde være
      betraktet som en kritisk feil (de ga ut 1.41.1 på grunn av det).
      De fleste andre feil vil ikke være kritiske.
    </para>

    <para>
      Derfor bør du bestemme antall feil.
      Antall tester som har bestått og ikke bestått finner du ved å kjøre:
    </para>

<!-- split into two lines for narrower screen windows -->
<screen remap="test"><userinput>grep '^test result:' rustc-testlog |
 awk '{sum1 += $4; sum2 += $6} END { print sum1 " passed; " sum2 " failed" }'</userinput></screen>

    <para>
      De andre tilgjengelige feltene er $8 for de som ble ignorert
      (dvs. hoppet over), $10 for "målt" og $12 for "filtrert ut", men begge
      de to siste er sannsynligvis null.
    </para>

    <para>
      Nå, som &root; bruker, installer pakken:
    </para>

    <note>
      <para>
        Hvis <command>sudo</command> eller <command>su</command> er påberopt for
        å bytte til &root; bruker, sikre at
        <envar>LIBSSH2_SYS_USE_PKG_CONFIG</envar> og
        <envar>LIBSQLITE3_SYS_USE_PKG_CONFIG</envar> er riktig sendt ellers kan
 følgende kommando gjenoppbygge <command>cargo</command> med
 sendte kopier av libssh2 og sqlite.  For <command>sudo</command>,
        bruk
        <option>--preserve-env=LIB{SSH2,SQLITE3}_SYS_USE_PKG_CONFIG</option>
        alternativet.  For <command>su</command>, <emphasis>ikke</emphasis> bruk
        <option>-</option> eller <option>--login</option> alternativene.
      </para>
    </note>

<screen role='root'><userinput>./x.py install rustc std &amp;&amp;
./x.py install --stage=1 cargo clippy rustfmt</userinput></screen>

    <para>
      Fortsatt som &root; bruker, fiks installasjonen av dokumentasjonen,
      symbolkoble en <application>Zsh</application>
      fullføringsfilen til riktig plassering, og flytt en
      <application>Bash</application> fullføringsfil til lokasjonen
      anbefalt av <application>Bash</application> ferdigstillelse
      vedlikeholdere:
    </para>

    <screen role='root'><userinput>rm -fv /opt/rustc-&rust-version;/share/doc/rustc-&rust-version;/*.old   &amp;&amp;
install -vm644 README.md                                \
               /opt/rustc-&rust-version;/share/doc/rustc-&rust-version; &amp;&amp;

install -vdm755 /usr/share/zsh/site-functions      &amp;&amp;
ln -sfv /opt/rustc/share/zsh/site-functions/_cargo \
        /usr/share/zsh/site-functions

mv -v /etc/bash_completion.d/cargo /usr/share/bash-completion/completions</userinput></screen>

    <para>
      Til slutt, deaktiver eksporterte miljøvariabler:
    </para>

<screen><userinput>unset LIB{SSH2,SQLITE3}_SYS_USE_PKG_CONFIG</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Parameterforklaringer</title>

    <para>
      <command>ln -svfn rustc-&rust-version; /opt/rustc</command>: hvis dette ikke
      er den første bruken av <filename class="directory">/opt/rustc</filename>
      symbolkobling, overskriv den ved å tvinge, og bruk '-n'-flagget for å unngå å få
      forvirrende resultater fra f.eks. <command>ls -l</command>.
    </para>

    <para>
      <literal>targets = "X86"</literal>: dette unngår å bygge alt tilgjengelig
      linux krysskompilatorer (AArch64, MIPS, PowerPC, SystemZ, etc). Dessverre,
      rust insisterer på å installere kildefiler for disse nedenfor
      <filename class="directory">/opt/rustc/lib/src</filename>.
    </para>

    <para>
      <literal>tools = ["cargo", "clippy", "rustdoc", "rustfmt"]</literal>:
      bygg bare verktøyene fra 'standard' profilen i binær kommando
      <command>rustup</command> som anbefales for de fleste brukere.
      De andre verktøyene er neppe nyttige med mindre du bruker (gammel) kode
      analysatorer eller redigering av standardbiblioteket.
    </para>

    <para>
      <literal>channel = "stable"</literal>: dette sikrer at kun stabile funksjoner
      kan brukes, standard i <filename>config.toml</filename> er å bruke
      utviklingsfunksjoner, som ikke passer for en utgitt versjon.
    </para>

    <!-- comment while using shipped LLVM -->
    <para>
      <literal>[target.x86_64-unknown-linux-gnu]</literal>: syntaksen til
      <filename>config.toml</filename> krever en <literal>llvm-config</literal>
      oppføring for hvert mål som system-llvm skal brukes for. Endre målet
      til <literal>[target.i686-unknown-linux-gnu]</literal> hvis du bygger
      på 32-bit x86. Hele denne delen kan utelates hvis du ønsker å bygge
      mot den sendte llvm, eller ikke har clang, men den resulterende bygget vil
      være større og ta lengre tid.
    </para>

<!--<para>
      <command>sed -i -e '/^curl /s/0.4.38/0.4.40/' ... </command>: to crates
      som normalt lastes ned for denne utgivelsen, initialiseres ikke riktig
      <application>curl</application>hvis du bruker
      <application>openssl-3.0.0</application>. Upstream har fikset det for en
      fremtidig utgivelse, forårsaker denne sed at de faste versjonene brukes.
    </para>-->

    <!-- https://github.com/alexcrichton/ssh2-rs/issues/173 -->
    <para>
      <command>export LIBSSH2_SYS_USE_PKG_CONFIG=1</command>: tillat
      <command>cargo</command> å koble til systemets libssh2.
    </para>

    <!-- src/tools/cargo/Cargo.toml is specifying "bundled" as the
         upstream is suggesting to avoid issues building for Windoge.
         We don't care about Windoge so override this if we have
         system sqlite3.  -->
    <para>
      <command>export LIBSQLITE3_SYS_USE_PKG_CONFIG=1</command>: Tillat
      <command>cargo</command> for å linke til systemets sqlite.
    </para>

<!--<para>
      <command>export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"</command>:
      Dette legger til en lenke til libffi til eventuelle RUSTFLAGS du allerede passerer
      til bygget. På noen systemer unnlater kobling å inkludere libffi med mindre
      dette brukes. Årsaken til at dette er nødvendig er ikke klarlagt.
      2023-01-14 : antas ikke lenger å være nødvendig, men det er noen år
      siden en person rapporterte å trenge dette, hold det kommentert for øyeblikket.
    </para>-->

    <para>
      <parameter>--verbose</parameter>: denne bryteren kan noen ganger gi mer
      informasjon om en test som mislykkes.
    </para>

    <para>
      <parameter>--no-fail-fast</parameter>: denne bryteren sikrer at testpakken
      ikke vil stoppe ved den første feilen.
    </para>

    <!-- https://github.com/rust-lang/rust/issues/94147 -->
    <para>
      <parameter>--stage=1</parameter>: denne bryteren løser et problem som
      forårsaker at noen Rustc komponenter gjenoppbygges unødvendig
      <command>./x.py install</command>.
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Konfigurere Rust</title>

    <sect3 id="rustc-config">
      <title>Konfigurasjonsinformasjon</title>

      <para>
        Hvis du har installert <application>rustc</application> i
        <filename class="directory">/opt</filename>, må du oppdatere
        følgende konfigurasjonsfiler slik at <application>rustc</application>
        er riktig funnet av andre pakker og systemprosesser.
      </para>

      <para>
        Som <systemitem class="username">root</systemitem> bruker, opprett
        <filename>/etc/profile.d/rustc.sh</filename> filen:
      </para>

<screen role="root"><userinput>cat &gt; /etc/profile.d/rustc.sh &lt;&lt; "EOF"
<literal># Begin /etc/profile.d/rustc.sh

pathprepend /opt/rustc/bin           PATH

# End /etc/profile.d/rustc.sh</literal>
EOF</userinput></screen>

      <para>
        Oppdater gjeldende PATH umiddelbart etter installasjonen
        for ditt nåværende skall som en vanlig bruker:
      </para>

<screen><userinput>source /etc/profile.d/rustc.sh</userinput></screen>

    </sect3>
  </sect2>


  <sect2 role="content">
    <title>Innhold</title>

    <segmentedlist>
      <segtitle>Installerte Programmer</segtitle>
      <segtitle>Installerte Biblioteker</segtitle>
      <segtitle>Installerte Mapper</segtitle>

      <seglistitem>
        <seg>
          cargo-clippy, cargo-fmt, cargo, clippy-driver, rust-gdb,
          rust-gdbgui, rust-lldb, rustc, rustdoc, og rustfmt
        </seg>
        <seg>
          librustc-driver-&lt;16-byte-hash&gt;.so,
          libstd-&lt;16-byte-hash&gt;.so, og
          libtest-&lt;16-byte-hash&gt;.so
        </seg>
        <seg>
          ~/.cargo,
          /opt/rustc, symbolsk lenke til
          /opt/rustc-&rust-version;
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Korte Beskrivelser</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="cargo-clippy">
        <term><command>cargo-clippy</command></term>
        <listitem>
          <para>
            gir lint sjekker for en cargo pakke
          </para>
          <indexterm zone="rust cargo-clippy">
            <primary sortas="b-cargo-clippy">cargo-clippy</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cargo-fmt">
        <term><command>cargo-fmt</command></term>
        <listitem>
          <para>
            formaterer alle bin og lib filer i gjeldende crate ved hjelp av
            rustfmt
          </para>
          <indexterm zone="rust cargo-fmt">
            <primary sortas="b-cargo-fmt">cargo-fmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

<!--  <varlistentry id="cargo-miri">
        <term><command>cargo-miri</command></term>
        <listitem>
          <para>
            er til bruk av Miri til å tolke bin crates og tester. Det er
            ikke installert som standard.
          </para>
          <indexterm zone="rust cargo-miri">
            <primary sortas="b-cargo-miri">cargo-miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->

      <varlistentry id="cargo">
        <term><command>cargo</command></term>
        <listitem>
          <para>
            er Pakkebehandler for Rust
          </para>
          <indexterm zone="rust cargo">
            <primary sortas="b-cargo">cargo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clippy-driver">
        <term><command>clippy-driver</command></term>
        <listitem>
          <para>
            gir lint sjekker for rust
          </para>
          <indexterm zone="rust clippy-driver">
            <primary sortas="b-clippy-driver">clippy-driver</primary>
          </indexterm>
        </listitem>
      </varlistentry>

<!--  <varlistentry id="miri">
        <term><command>miri</command></term>
        <listitem>
          <para>
            er tolk for Rusts mellomrepresentasjon på mellomnivå
            (MIR). Den er ikke installert som standard.
          </para>
          <indexterm zone="rust miri">
            <primary sortas="b-miri">miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rls">
        <term><command>rls</command></term>
        <listitem>
          <para>
            er Rust Language Server. Dette kan kjøre i bakgrunnen til
            gi IDE-er, redaktører og andre verktøy informasjon om Rust
            programmer
          </para>
          <indexterm zone="rust rls">
            <primary sortas="b-rls">rls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-analyzer">
        <term><command>rust-analyzer</command></term>
        <listitem>
          <para>
            er en implementering av Language Server Protocol for the Rust
            programmeringsspråk.
          </para>
          <indexterm zone="rust rust-analyzer">
            <primary sortas="b-rust-analyzer">rust-analyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-demangler">
        <term><command>rust-demangler</command></term>
        <listitem>
          <para>
            konverterer en liste over rustmanglede symboler til en
            tilsvarende liste over avviklede symboler
          </para>
          <indexterm zone="rust rust-demangler">
            <primary sortas="b-rust-demangler">rust-demangler</primary>
          </indexterm>
        </listitem>
      </varlistentry> -->

      <varlistentry id="rust-gdb">
        <term><command>rust-gdb</command></term>
        <listitem>
          <para>
            er et innpakningsskript for gdb, som trekker inn Python pretty-printing
            moduler installert i
            <filename class="directory">/opt/rustc-&rust-version;/lib/rustlib/etc</filename>
          </para>
          <indexterm zone="rust rust-gdb">
            <primary sortas="b-rust-gdb">rust-gdb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-gdbgui">
        <term><command>rust-gdbgui</command></term>
        <listitem>
          <para>
            er et innpakningsskript for et grafisk grensesnitt til gdb som kjører i en
             nettleser
          </para>
          <indexterm zone="rust rust-gdbgui">
            <primary sortas="b-rust-gdbgui">rust-gdbgui</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-lldb">
        <term><command>rust-lldb</command></term>
        <listitem>
          <para>
            er et innpakningsskript for LLDB (LLVM-feilsøkeren)
             rekke inn Python pretty-printing modulene
          </para>
          <indexterm zone="rust rust-lldb">
            <primary sortas="b-rust-lldb">rust-lldb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustc">
        <term><command>rustc</command></term>
        <listitem>
          <para>
            er rust kompilatoren
          </para>
          <indexterm zone="rust rustc">
            <primary sortas="b-rustc">rustc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustdoc">
        <term><command>rustdoc</command></term>
        <listitem>
          <para>
            genererer dokumentasjon fra rust kildekode
          </para>
          <indexterm zone="rust rustdoc">
            <primary sortas="b-rustdoc">rustdoc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustfmt">
        <term><command>rustfmt</command></term>
        <listitem>
          <para>
            formaterer rust kode
          </para>
          <indexterm zone="rust rustfmt">
            <primary sortas="b-rustfmt">rustfmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstd">
        <term><filename class="libraryfile">libstd-&lt;16-byte-hash&gt;.so</filename></term>
        <listitem>
          <para>
            er Rust Standard Bibliotek, grunnlaget for flyttbar Rust programvare
          </para>
          <indexterm zone="rust libstd">
            <primary sortas="c-libstd">libstd-&lt;16-byte-hash&gt;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

</sect1>
