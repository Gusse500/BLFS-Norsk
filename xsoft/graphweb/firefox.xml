<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY firefox-download-http "&mozilla-http;/firefox/releases/&firefox-version;esr/source/firefox-&firefox-version;esr.source.tar.xz">
  <!ENTITY firefox-download-ftp  " ">
  <!ENTITY firefox-md5sum        "747043bb967bdbc6f4bd3b29b5bdd438">
  <!ENTITY firefox-size          "491 MB">

  <!-- NB with stylo, much of the build uses rust, and therefore cargo files.
    But the extra cached cargo files, if any, seem to be minimal -->
  <!ENTITY firefox-buildsize     "6.4 GB (209 MB installert) uten tester">
  <!-- editors: with ff63 and rust-1.29, ./mach build -j4 is probably the
   most practical way to get a timing on a machine with more cores, if taking
   cores offline is not practical. If in doubt, round up -->
  <!ENTITY firefox-time          "22 SBU using -j4, uten tester">
]>

<sect1 id="firefox" xreflabel="Firefox-&firefox-version;">
  <?dbhtml filename="firefox.html" ?>


<!-- indicate this is the ESR variant,
  The point is that the stable release differs slightly.
  <title>Firefox-&firefox-version;</title>-->
  <title>Firefox-&firefox-version;esr</title>

  <indexterm zone="firefox">
    <primary sortas="a-Firefox">Firefox</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduksjon til Firefox</title>

    <para>
      <application>Firefox</application> er en frittstående nettleser basert på
      <application>Mozilla</application> kodebasen.
    </para>

    &lfs120_checked;

    <bridgehead renderas="sect3">Pakkeinformasjon</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nedlasting (HTTP): <ulink url="&firefox-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting (FTP): <ulink url="&firefox-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting MD5 sum: &firefox-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlastingsstørrelse: &firefox-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert diskplass som kreves: &firefox-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimert byggetid: &firefox-time;
        </para>
      </listitem>
    </itemizedlist>

<!--<bridgehead renderas="sect3">Ytterligere Nedlastinger</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nødvendig oppdatering:
          <ulink url="&patch-root;/firefox-&firefox-version;-consolidated-1.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nødvendig oppdatering for ny <xref linkend="ffmpeg"/> API:
          <ulink url="&patch-root;/firefox-&firefox-version;-ffmpeg_6-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>-->

    <note>
      <para>
        Mappenavnet er firefox-&firefox-version;
      </para>

      <para>
        Å pakke ut tarballen
        vil tilbakestille tillatelsene til gjeldende mappe til 0755 hvis du
        har tillatelse til det. Hvis du gjør dette i en mappe hvor
        den klebrige biten er satt, slik
        som <filename class="directory">/tmp</filename> vil det ende med 
        feilmeldinger:
      </para>

<literallayout>tar: .: Cannot utime: Operation not permitted
tar: .: Cannot change mode to rwxr-xr-t: Operation not permitted
tar: Exiting with failure status due to previous errors
</literallayout>

      <para>
        Dette avsluttes med ikke-null status, men det betyr
        <emphasis>IKKE</emphasis> at det er et reelt problem.
        Ikke untar som <systemitem class="username">root</systemitem> bruker
        i en mappe der klebrig-biten er satt - det vil deaktivere den.
      </para>

      <para>
        Som med andre store pakker som bruker C++ (eller rust), er SBU tiden
        for å bygge dette varierer mer enn du kanskje forventer. Byggetidene
        vil øke betydelig hvis maskinen din må bruke vekselminnet.
      </para>

      <para>
        Selv om oppstrøms foretrekker å bruke <application>PulseAudio</application>,
        for øyeblikket <application>Alsa</application> kan fortsatt brukes. Begge
        kan trenge kjøretidskonfigurasjon for å få lyden til å fungere.
      </para>
    </note>

    <bridgehead renderas="sect3">Firefox Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Påkrevd</bridgehead>
    <para role="required">
      <xref linkend="cbindgen"/>,
      <xref linkend="dbus-glib"/>,
      <xref linkend="gtk3"/>,
      <xref linkend="libnotify"/>,
      <xref linkend="llvm"/> (med clang, brukes til bindgen selv om man bruker gcc),
      <xref linkend="nodejs"/>,
      <xref linkend="pulseaudio"/>
      (eller
      <xref linkend="alsa-lib"/> hvis du redigerer mozconfig;
        nå avviklet av mozilla), i begge tilfeller vennligst les
        Konfigurasjonsinformasjon,
      <xref linkend="python3"/> (gjenoppbygget etter installasjon <xref linkend="sqlite"/>),
      <xref linkend="startup-notification"/>,
      <xref linkend="unzip"/>,
      <xref linkend="yasm"/>, og
      <xref linkend="zip"/>
    </para>

    <bridgehead renderas="sect4">Anbefalt</bridgehead>
    <para role="recommended">
      <xref linkend="icu"/>,
      <xref linkend="libevent"/>,
      <xref linkend="libvpx"/>,
      <xref linkend="libwebp"/>,
      <xref linkend="nasm"/>,
      <xref linkend="nss"/>
    </para>

    <note>
      <para>
        Hvis du ikke installerer anbefalte avhengigheter, blir interne kopier av
        disse pakkene brukt. De kan ha blitt testet for å fungere, men de kan
        være utdatert eller inneholde sikkerhetshull.
      </para>
    </note>

    <bridgehead renderas="sect4">Valgfri</bridgehead>
    <para role="optional">
      <xref linkend="curl"/>,
      <xref linkend="doxygen"/>,
      <xref role="runtime" linkend="ffmpeg"/> (kjøretid, for å spille mov, mp3 eller mp4 files),
      <xref linkend="liboauth"/>,
      <xref role="runtime" linkend="pciutils"/> (kjøretid),
      <xref linkend="valgrind"/>,
      <xref linkend="wget"/>,
      <xref linkend="wireless_tools"/>,
      <ulink url="https://github.com/libproxy/libproxy">libproxy</ulink>
    </para>

    <para condition="html" role="usernotes">
      Redaktørens notater: <ulink url="&blfs-wiki;/firefox"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Installasjon av Firefox</title>

    <para>
      Konfigurasjonen av <application>Firefox</application> er oppnådd
      ved å lage en <filename>mozconfig</filename> fil som inneholder ønsket
      konfigurasjonsalternativer. En standard <filename>mozconfig</filename> er
      opprettet nedenfor. For å se hele listen over tilgjengelige konfigurasjonsalternativer
      (og en forkortet beskrivelse av noen av dem), utsted <command>./mach
      configure -- --help | less</command>. Du kan også
      se gjennom hele filen og fjerne kommentarer til andre ønskede alternativer.
      Opprett filen ved å gi følgende kommando:
    </para>

<screen><userinput>cat &gt; mozconfig &lt;&lt; "EOF"
<literal># If you have a multicore machine, all cores will be used by default.

# If you have installed (or will install) wireless-tools, and you wish
# to use geolocation web services, comment out this line
ac_add_options --disable-necko-wifi

# API Keys for geolocation APIs - necko-wifi (above) is required for MLS
# Uncomment the following line if you wish to use Mozilla Location Service
#ac_add_options --with-mozilla-api-keyfile=$PWD/mozilla-key

# Uncomment the following line if you wish to use Google's geolocation API
# (needed for use with saved maps with Google Maps)
#ac_add_options --with-google-location-service-api-keyfile=$PWD/google-key

# startup-notification is required since firefox-78

# Uncomment the following option if you have not installed PulseAudio and
# want to use alsa instead
#ac_add_options --enable-audio-backends=alsa

# Comment out following options if you have not installed
# recommended dependencies:
ac_add_options --with-system-icu
ac_add_options --with-system-libevent
ac_add_options --with-system-libvpx
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --with-system-webp

# Unlike with thunderbird, although using the gold linker can
# save four megabytes in the installed file it does not make
# the build faster.

# libdav1d (av1 decoder) requires nasm. Uncomment this if nasm
# has not been installed. Do not uncomment this if you have
# ffmpeg installed.
#ac_add_options --disable-av1

# You cannot distribute the binary if you do this
ac_add_options --enable-official-branding

# Stripping is now enabled by default.
# Uncomment these lines if you need to run a debugger:
#ac_add_options --disable-strip
#ac_add_options --disable-install-strip

# Disabling debug symbols makes the build much smaller and a little
# faster. Comment this if you need to run a debugger. Note: This is
# required for compilation on i686.
ac_add_options --disable-debug-symbols

# The elf-hack is reported to cause failed installs (after successful builds)
# on some machines. It is supposed to improve startup time and it shrinks
# libxul.so by a few MB - comment this if you know your machine is not affected.
ac_add_options --disable-elf-hack

# The BLFS editors recommend not changing anything below this line:
ac_add_options --prefix=/usr
ac_add_options --enable-application=browser
ac_add_options --disable-crashreporter
ac_add_options --disable-updater
# enabling the tests will use a lot more space and significantly
# increase the build time, for no obvious benefit.
ac_add_options --disable-tests

# The default level of optimization again produces a working build with gcc.
ac_add_options --enable-optimize

ac_add_options --enable-system-ffi
ac_add_options --enable-system-pixman

ac_add_options --with-system-jpeg
ac_add_options --with-system-png
ac_add_options --with-system-zlib

# Sandboxing works well on x86_64 but might cause issues on other
# platforms. If not on x86_64, e.g. i686, it is recommended to
# uncomment the following switch.
#ac_add_options --disable-sandbox

# Using sandboxed wasm libraries has been moved to all builds instead
# of only mozilla automation builds. It requires extra llvm packages
# and was reported to seriously slow the build. Disable it.
ac_add_options --without-wasm-sandboxed-libraries

# The following option unsets Telemetry Reporting. With the Addons Fiasco,
# Mozilla was found to be collecting user's data, including saved passwords and
# web form data, without users consent. Mozilla was also found shipping updates
# to systems without the user's knowledge or permission.
# As a result of this, use the following command to permanently disable
# telemetry reporting in Firefox.
unset MOZ_TELEMETRY_REPORTING

mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/firefox-build-dir</literal>
EOF</userinput></screen>

    <para>
      Kompiler <application>Firefox</application> ved å kjøre følgende
      kommandoer:
    </para>
<!-- Not needed with clang. Upstream bug at
     https://bugzilla.mozilla.org/show_bug.cgi?id=1729459

    <para>
      Hvis du bygger på en 32-bits maskin, fungerer følgende sed rundt
      et problem med en inkompatibel <quote>double</quote> type i en
      deklarasjonsfil:
    </para>

<screen><userinput>case "$(uname -m)" in
    i?86) sed -e '/typedef[ ]*double/s/double/long double/' \
              -i modules/fdlibm/src/math_private.h ;;
esac</userinput></screen>
-->
    <para>
      Hvis geolokaliserings APIene er nødvendige:
    </para>

    <note>
      <para>
        <!-- Taken from Arch Linux - an immensely helpful link - Thanks -->
        Google og Mozilla API nøkler nedenfor er spesifikke for LFS. Hvis du bruker
        disse instruksjonene for en annen distro, eller hvis du har tenkt å distribuere
        binære kopier av programvaren ved å bruke disse instruksjonene,
        hent dine egne nøkler ved å følge instruksjonene på
        <ulink url="https://www.chromium.org/developers/how-tos/api-keys"/> og
        <ulink url="https://location.services.mozilla.com/api"/> henholdsvis.
        <!-- BLFS Devs, register an account at Google with your
        @linuxfromscratch.org email address, and I'll make you an administrator
        for the 'Google APIs for LFS' project (where the API and OAuth keys
        were created for use in the book).-->
      </para>
    </note>

<screen><userinput>echo "AIzaSyDxKL42zsPjbke5O8_rPVpVrLrJ8aeE9rQ" > google-key
echo "613364a7-9418-4c86-bcee-57e32fd70c23" > mozilla-key</userinput></screen>

    <note>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="../../xincludes/mozshm.xml"/>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="../../xincludes/mozmach.xml"/>

    </note>

<!--<para>
      Fiks å bygge Firefox med Clang 16 eller C++ deklarasjoner fra GCC 13.
      Og, omgå en byggefeil med Rustc-1.70.0:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../firefox-&firefox-version;-consolidated-1.patch</userinput></screen>

    <para>
      Bruk følgende oppdatering slik at firefox kan spille av H.264-videoer:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../firefox-&firefox-version;-ffmpeg_6-1.patch</userinput></screen>-->

    <para>
      Påkall nå Python <command>mach</command> skript for å kompilere pakken.
    </para>

<screen><userinput>export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=none &amp;&amp;
export MOZBUILD_STATE_PATH=${PWD}/mozbuild          &amp;&amp;
./mach configure                                    &amp;&amp;
./mach build</userinput></screen>

    <para>
      <filename>mozconfig</filename> ovenfor deaktiverer testene fordi
      de bruker mye mer tid og diskplass uten noen åpenbar fordel. Hvis
      du likevel har aktivert dem, kan du kjøre testene ved å kjøre
      <command>./mach gtest</command>. Dette vil kreve en nettverkstilkobling,
      og å bli kjørt fra en Xorg økt - det er en sprettopp-dialog
      når den ikke klarer å koble til ALSA (det skaper ikke en mislykket test).
      En eller to tester vil mislykkes. For å se detaljene om feilen(e)
      må du logge utdataene fra den kommandoen slik at du kan se gjennom den.
    </para>

    <para>
      Nå, som <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=none ./mach install</userinput></screen>

    <para>
      Tøm miljøvariablene som ble angitt ovenfor:
    </para>

<screen><userinput>unset MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE MOZBUILD_STATE_PATH</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Parameterforklaringer</title>

<!--<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../../xincludes/SIOCGSTAMP.xml"/>-->

    <para>
      <command>export MOZBUILD_STATE_PATH=${PWD}/mozbuild</command>: Bygget
      er nå ment å fortelle deg at den har til hensikt å opprette <filename
      class="directory">~/.mozbuild</filename>, og tilby deg et alternativ å
      trykke &lt;ENTER&gt; for å godta dette, eller Ctrl-C for å avbryte og starte på nytt
      å bygge etter å ha spesifisert mappen. I praksis kan det hende at meldingen ikke
      vises til etter &lt;ENTER&gt; er presset, dvs. bygget stopper.
    </para>

    <para>
      Den mappen brukes for en (sannsynligvis tilfeldig) telemetriidentifikator.
      Opprette dette i byggemappen, og slette det etter
      installasjon, hindrer den i bruk. Hvis du ønsker å delta
      telemetri, eksporter MOZBUILD_STATE_PATH for å peke til standardmappen
      og fjern oppføringen fra <filename>mozconfig</filename>.
    </para>

    <para>
      <command>MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=none</command>: Bruk
      system python for å lage et virtuelt miljø for <command>mach</command>
      uten å laste ned noen python wheels og ikke bruke system python modulene.
      Dette forhindrer versjonsfeil mellom systemmoduler og medfølgende moduler.
    </para>

    <para>
      <command>./mach configure</command>: Dette validerer de medfølgende
      avhengigheter og <filename>mozconfig</filename>.
    </para>

    <para>
      <option>./mach build --verbose</option>: Bruk dette alternativet hvis du
      trenger detaljer om hvilke filer som kompileres, sammen med eventuelle C eller
      C++ flagg som brukes. Men ikke legg til '--verbose' til installeringskommandoen
      siden det ikke er akseptert der.
    </para>

    <para>
      <option>./mach build -jN</option>: Byggingen skal som standard bruke
      alle tilgjengelige CPU kjerner. Hvis bruk av alle kjernene får bygget til å bruke vekselminne
      fordi du har utilstrekkelig minne, kan det gå raskere å bruke færre kjerner.
    </para>

    <para>
      <option><envar>CC=gcc CXX=g++</envar></option>: BLFS pleide å
      foretrekke å bruke gcc og g++ i stedet for oppstrøms standardinnstillinger for
      <application>clang</application> programmer. Med utgivelsen av
      gcc-12 bygget tar lengre tid med gcc og g++, først og fremst fordi
      ekstra advarsler, og er større. Angi disse miljøvariablene
      <emphasis>før du kjører configure skriptet</emphasis>
      hvis du ønsker å fortsette å bruke gcc, g++. Bygging
      med GCC på i?86 er for øyeblikket ødelagt.
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Konfigurere Firefox</title>

    <para>
      Hvis du bruker et skrivebordsmiljø som <application>Gnome</application> eller
      <application>KDE</application> kan det være lurt å opprette en
      <filename>firefox.desktop</filename> fil sånn at
      <application>Firefox</application> vises i panelets menyer.
      Som &root; bruker:
    </para>

<screen role="root"><userinput>mkdir -pv /usr/share/applications &amp;&amp;
mkdir -pv /usr/share/pixmaps      &amp;&amp;

MIMETYPE="text/xml;text/mml;text/html;"                            &amp;&amp;
MIMETYPE+="application/xhtml+xml;application/vnd.mozilla.xul+xml;" &amp;&amp;
MIMETYPE+="x-scheme-handler/http;x-scheme-handler/https"           &amp;&amp;

cat &gt; /usr/share/applications/firefox.desktop &lt;&lt; EOF &amp;&amp;
<literal>[Desktop Entry]
Encoding=UTF-8
Name=Firefox Web Browser
Comment=Browse the World Wide Web
GenericName=Web Browser
Exec=firefox %u
Terminal=false
Type=Application
Icon=firefox
Categories=GNOME;GTK;Network;WebBrowser;
MimeType=$MIMETYPE
StartupNotify=true</literal>
EOF

unset MIMETYPE &amp;&amp;

ln -sfv /usr/lib/firefox/browser/chrome/icons/default/default128.png \
        /usr/share/pixmaps/firefox.png</userinput></screen>

    <sect3><title>Konfigurasjonsinformasjon</title>

      <para>
        Applikasjonsinnstillingene for firefox er tilgjengelige ved å skrive
        <command>about:config</command> i adressefeltet.
      </para>

      <para>
        Av og til, å få fungerende lyd i
        <application>firefox</application> kan være et problem. Skjønt oppstrøms
        foretrekker pulsaudio,
        bruk av <application>Alsa</application> kan være lettere.
      </para>

      <para>
        Hvis du har aktivert <application>Alsa</application> for lyd, kan det hende du trenger
        å endre en variabel for å få fungerende lyd. Hvis du kjører
        <command>firefox</command> fra en terminal og prøv å spille noe
        med lyd kan du støte på feilmeldinger som:
      </para>

      <para>
         <literal>Sandbox: seccomp sandbox violation: pid 3941, tid 4030,
         syscall 16, args 48 2147767296 139909894784796 0 0 0.</literal>
      </para>

      <para>
        Det var på x86_64, på i686 er syscall nummeret 54. For å tillate denne
        syscall, i <command>about:config</command> forandre
        <command>security.sandbox.content.syscall_whitelist</command> til 16
        (eller 54 hvis du bruker i686).
      </para>

      <para>
        Hvis du bruker <command>pulseaudio</command> i et skrivebordsmiljø, kan det
        allerede være startet av den DE. Men hvis det ikke er det, skjønt
        firefox-57 klarte å starte den, firefox-58 gjorde det ikke. Hvis du kjører
        <command>firefox</command> fra en terminal og dette problemet er tilstede,
        å prøve å spille av lyd vil
        støte på feilmeldinger advarsel <literal>Can't get cubeb
        context!</literal>
      </para>

    <para>
      Løsningen for dette er å lukke firefox, starte pulsaudio for å sjekke om det
      starter (hvis ikke, les informasjonen om konfigurering i <xref
      linkend="pulseaudio"/>) og start firefox på nytt for å sjekke at det fungerer.
      Hvis det nå fungerer, legg til følgende i din <filename>~/.xinitrc</filename>:
<phrase revision="sysv">
<literal>pulseaudio --verbose --log-target=syslog&amp;</literal></phrase>
<phrase revision="systemd">
<literal>pulseaudio --verbose --log-target=journald&amp;</literal></phrase>
        (dessverre, på noen systemer fungerer ikke dette).
      </para>

      <para>
        Det kan være lurt å bruke flere profiler i firefox. For å gjøre det, påkall
        firefox som <command>firefox --ProfileManager</command>. Du kan også
        sjekke hvilken profil som er i bruk fra
        <command>about:profiles</command>.
      </para>

      <para>
        Selv om WebRender (bruker GPU for komposisjon) ikke brukes av
        standard, ser det nå ut til å fungere bra på støttet maskinvare (ATI, Nvidia
        og Intel GPUer med Mesa-18 eller nyere). For en forklaring, se
        <ulink
       url="https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/">hacks.mozilla.org</ulink>.
       Den eneste ulempen ser ut til å være at på en maskin med begrenset RAM kan det hende det
       bruker mer RAM.
     </para>

    <para>
      For å sjekke om WebRender brukes, se i about:support. I grafikk
      seksjonen, vil Compositing enten vise 'Basic' (dvs. ikke i bruk) eller
      'WebRender'. For å aktivere det, gå til about:config og endre gfx.webrender.all
      til True. Du må starte firefox på nytt.
    </para>

    <para>
      Det kan være nyttig å nevne prosessene fra firefox som kan dukke opp i
      <command>top</command> - så vel som firefox selv, kan det være flere
      Nettinnhold prosesser, og nå en RDD prosess (Remote Data Decoder) som
      vises når du spiller av nettvideoer kodet med av1 (libdav1d). Hvis WebRender
      har blitt aktivert, vil en GPU prosess også vises når firefox må
      oppdatere på nytt (f.eks. bla, åpne en ny fane eller spille av en video).
    </para>

    </sect3>
  </sect2>

  <sect2 role="content">
    <title>Innhold</title>

    <segmentedlist>
      <segtitle>Installerte Programmer</segtitle>
      <segtitle>Installerte Biblioteker</segtitle>
      <segtitle>Installert Mappe</segtitle>

      <seglistitem>
        <seg>
          firefox
        </seg>
        <seg>
          Tallrike biblioteker, nettleserkomponenter, programtillegg, utvidelser og
          hjelpemoduler installert i /usr/lib/firefox
        </seg>
        <seg>
          /usr/lib/firefox
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Korte Beskrivelser</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="firefox-prog">
        <term><command>firefox</command></term>
        <listitem>
          <para>
            er en <application>GTK+-3</application> nettleser som bruker
            Mozilla Gecko gjengivelsesmotoren
          </para>
          <indexterm zone="firefox firefox-prog">
            <primary sortas="b-firefox">firefox</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
